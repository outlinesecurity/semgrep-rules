{"A3: Sensitive Data Exposure": {"terraform": [{"file_path": "../terraform/azure/security/appservice/appservice-use-secure-tls-policy.yaml", "description": "Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version = \"1.2\"` in your resource block.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/appservice-use-secure-tls-policy.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#min_tls_version"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../terraform/azure/security/appservice/appservice-use-secure-tls-policy.yaml", "description": "Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version = \"1.2\"` in your resource block.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/appservice-use-secure-tls-policy.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#min_tls_version"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../terraform/aws/security/aws-elasticsearch-insecure-tls-version.yaml", "description": "Detected an AWS Elasticsearch domain using an insecure version of TLS. To fix this, set \"tls_security_policy\" equal to \"Policy-Min-TLS-1-2-2019-07\".", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-elasticsearch-insecure-tls-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["aws", "terraform"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../terraform/aws/security/aws-elasticsearch-insecure-tls-version.yaml", "description": "Detected an AWS Elasticsearch domain using an insecure version of TLS. To fix this, set \"tls_security_policy\" equal to \"Policy-Min-TLS-1-2-2019-07\".", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-elasticsearch-insecure-tls-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["aws", "terraform"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}], "go": [{"file_path": "../go/lang/security/audit/crypto/use_of_weak_rsa_key.yaml", "description": "RSA keys should be at least 2048 bits", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_rsa_key.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/rsa.go", "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms"], "category": "security", "technology": ["go"], "confidence": "HIGH", "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/use_of_weak_rsa_key.yaml", "description": "RSA keys should be at least 2048 bits", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_rsa_key.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/rsa.go", "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms"], "category": "security", "technology": ["go"], "confidence": "HIGH", "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/audit/cbc-padding-oracle.yaml", "description": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/cbc-padding-oracle.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE", "references": ["https://capec.mitre.org/data/definitions/463.html", "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes", "https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY"], "category": "security", "technology": ["java"], "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/cbc-padding-oracle.yaml", "description": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/cbc-padding-oracle.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE", "references": ["https://capec.mitre.org/data/definitions/463.html", "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes", "https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY"], "category": "security", "technology": ["java"], "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/blowfish-insufficient-key-size.yaml", "description": "Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/blowfish-insufficient-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/blowfish-insufficient-key-size.yaml", "description": "Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/blowfish-insufficient-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/weak-ssl-context.yaml", "description": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/weak-ssl-context.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source_rule_url": "https://find-sec-bugs.github.io/bugs.htm#SSL_CONTEXT", "references": ["https://tools.ietf.org/html/rfc7568", "https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html"], "category": "security", "technology": ["java"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/weak-ssl-context.yaml", "description": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/weak-ssl-context.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source_rule_url": "https://find-sec-bugs.github.io/bugs.htm#SSL_CONTEXT", "references": ["https://tools.ietf.org/html/rfc7568", "https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html"], "category": "security", "technology": ["java"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/unencrypted-socket.yaml", "description": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/unencrypted-socket.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/unencrypted-socket.yaml", "description": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/unencrypted-socket.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-sha1.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-sha1.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-328: Use of Weak Hash"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-sha1.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-sha1.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-328: Use of Weak Hash"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-blowfish.yaml", "description": "Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-blowfish.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-blowfish.yaml", "description": "Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-blowfish.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/no-static-initialization-vector.yaml", "description": "Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/no-static-initialization-vector.yaml", "metadata": {"cwe": ["CWE-329: Generation of Predictable IV with CBC Mode"], "owasp": ["A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#STATIC_IV", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://cwe.mitre.org/data/definitions/329.html"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-rc2.yaml", "description": "Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-rc2.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-rc2.yaml", "description": "Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-rc2.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/ecb-cipher.yaml", "description": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/ecb-cipher.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#ECB_MODE", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/ecb-cipher.yaml", "description": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/ecb-cipher.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#ECB_MODE", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/weak-rsa.yaml", "description": "RSA keys should be at least 2048 bits based on NIST recommendation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/weak-rsa.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/weak-rsa.yaml", "description": "RSA keys should be at least 2048 bits based on NIST recommendation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/weak-rsa.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-md5-digest-utils.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-md5-digest-utils.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-328: Use of Weak Hash"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-md5-digest-utils.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-md5-digest-utils.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-328: Use of Weak Hash"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-default-aes.yaml", "description": "Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-default-aes.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-default-aes.yaml", "description": "Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-default-aes.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/rsa-no-padding.yaml", "description": "Using RSA without OAEP mode weakens the encryption.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/rsa-no-padding.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING", "references": ["https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/"], "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java", "kotlin"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/rsa-no-padding.yaml", "description": "Using RSA without OAEP mode weakens the encryption.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/rsa-no-padding.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING", "references": ["https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/"], "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java", "kotlin"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/des-is-deprecated.yaml", "description": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/des-is-deprecated.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#DES_USAGE", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard", "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/des-is-deprecated.yaml", "description": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/des-is-deprecated.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#DES_USAGE", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard", "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-rc4.yaml", "description": "Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-rc4.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-rc4.yaml", "description": "Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-rc4.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-aes-ecb.yaml", "description": "Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-aes-ecb.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-aes-ecb.yaml", "description": "Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-aes-ecb.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures", "https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/desede-is-deprecated.yaml", "description": "Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/desede-is-deprecated.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE", "references": ["https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/desede-is-deprecated.yaml", "description": "Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/desede-is-deprecated.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE", "references": ["https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/gcm-detection.yaml", "description": "GCM detected, please check that IV/nonce is not reused, an Initialization Vector (IV) is a nonce used to randomize the encryption, so that even if multiple messages with identical plaintext are encrypted, the generated corresponding ciphertexts are different. Unlike the Key, the IV usually does not need to be secret, rather it is important that it is random and unique. Certain encryption schemes the IV is exchanged in public as part of the ciphertext. Reusing same Initialization Vector with the same Key to encrypt multiple plaintext blocks allows an attacker to compare the ciphertexts and then, with some assumptions on the content of the messages, to gain important information about the data being encrypted.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/gcm-detection.yaml", "metadata": {"category": "security", "cwe": ["CWE-323: Reusing a Nonce, Key Pair in Encryption"], "references": ["https://cwe.mitre.org/data/definitions/323.html"], "technology": ["java"], "owasp": ["A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/gcm-nonce-reuse.yaml", "description": "GCM IV/nonce is reused: encryption can be totally useless", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/gcm-nonce-reuse.yaml", "metadata": {"cwe": ["CWE-323: Reusing a Nonce, Key Pair in Encryption"], "category": "security", "source-rule-url": "https://www.youtube.com/watch?v=r1awgAl90wM", "technology": ["java"], "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-md5.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-328: Use of Weak Hash"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/use-of-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/use-of-md5.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-328: Use of Weak Hash"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/no-null-cipher.yaml", "description": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/no-null-cipher.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/crypto/no-null-cipher.yaml", "description": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crypto/no-null-cipher.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../java/java-jwt/security/jwt-none-alg.yaml", "description": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/java-jwt/security/jwt-none-alg.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "category": "security", "technology": ["jwt"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../java/java-jwt/security/jwt-none-alg.yaml", "description": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/java-jwt/security/jwt-none-alg.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "category": "security", "technology": ["jwt"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "kotlin": [{"file_path": "../kotlin/lang/security/weak-rsa.yaml", "description": "RSA keys should be at least 2048 bits based on NIST recommendation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/weak-rsa.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms"], "category": "security", "technology": ["kotlin"], "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../kotlin/lang/security/weak-rsa.yaml", "description": "RSA keys should be at least 2048 bits based on NIST recommendation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/weak-rsa.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms"], "category": "security", "technology": ["kotlin"], "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}], "php": [{"file_path": "../php/lang/security/openssl-cbc-static-iv.yaml", "description": "Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext attacks against encrypted data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/openssl-cbc-static-iv.yaml", "metadata": {"cwe": ["CWE-329: Generation of Predictable IV with CBC Mode"], "references": ["https://csrc.nist.gov/publications/detail/sp/800-38a/final"], "owasp": ["A02:2021 - Cryptographic Failures"], "technology": ["php", "openssl"], "category": "security", "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../php/lang/security/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/md5-used-as-password.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://www.php.net/password_hash"], "category": "security", "technology": ["md5"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/md5-used-as-password.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://www.php.net/password_hash"], "category": "security", "technology": ["md5"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "scala": [{"file_path": "../scala/lang/security/audit/rsa-padding-set.yaml", "description": "Usage of RSA without OAEP (Optimal Asymmetric Encryption Padding) may weaken encryption. This could lead to sensitive data exposure. Instead, use RSA with `OAEPWithMD5AndMGF1Padding` instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/rsa-padding-set.yaml", "metadata": {"cwe": ["CWE-780: Use of RSA Algorithm without OAEP"], "owasp": ["A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["scala", "cryptography"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "resources": ["https://blog.codacy.com/9-scala-security-issues/"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "generic": [{"file_path": "../generic/nginx/security/insecure-ssl-version.yaml", "description": "Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/nginx/security/insecure-ssl-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://www.acunetix.com/blog/web-security-zone/hardening-nginx/", "https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/"], "category": "security", "technology": ["nginx"], "confidence": "HIGH", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../generic/nginx/security/insecure-ssl-version.yaml", "description": "Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/nginx/security/insecure-ssl-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://www.acunetix.com/blog/web-security-zone/hardening-nginx/", "https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/"], "category": "security", "technology": ["nginx"], "confidence": "HIGH", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/dotnet/security/use_weak_rng_for_keygeneration.yaml", "description": "You are using an insecure random number generator (RNG) to create a cryptographic key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/use_weak_rng_for_keygeneration.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH", "category": "security", "cwe": ["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"], "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://learn.microsoft.com/en-us/dotnet/api/system.random?view=net-6.0#remarks", "https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=net-6.0", "https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0#constructors", "https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.symmetricalgorithm.key?view=net-6.0#system-security-cryptography-symmetricalgorithm-key"], "subcategory": ["vuln"], "technology": [".net"]}}, {"file_path": "../csharp/dotnet/security/use_ecb_mode.yaml", "description": "Usage of the insecure ECB mode detected. You should use an authenticated encryption mode instead, which is implemented by the classes AesGcm or ChaCha20Poly1305.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/use_ecb_mode.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH", "category": "security", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0", "https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0", "https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.ciphermode?view=net-6.0", "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes"], "subcategory": ["vuln"], "technology": [".net"]}}], "javascript": [{"file_path": "../javascript/jose/security/jwt-none-alg.yaml", "description": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/jose/security/jwt-none-alg.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.3 Insecue Stateless Session Tokens", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["jose", "jwt"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"]}}, {"file_path": "../javascript/jose/security/jwt-none-alg.yaml", "description": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/jose/security/jwt-none-alg.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.3 Insecue Stateless Session Tokens", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["jose", "jwt"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"]}}], "ruby": [{"file_path": "../ruby/lang/security/insufficient-rsa-key-size.yaml", "description": "The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/insufficient-rsa-key-size.yaml", "metadata": {"technology": ["ruby"], "category": "security", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../ruby/lang/security/insufficient-rsa-key-size.yaml", "description": "The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/insufficient-rsa-key-size.yaml", "metadata": {"technology": ["ruby"], "category": "security", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../ruby/lang/security/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/md5-used-as-password.yaml", "metadata": {"category": "security", "technology": ["md5"], "references": ["https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/md5-used-as-password.yaml", "metadata": {"category": "security", "technology": ["md5"], "references": ["https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/force-ssl-false.yaml", "description": "Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/force-ssl-false.yaml", "metadata": {"cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb"], "category": "security", "technology": ["ruby"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../ruby/rails/security/brakeman/check-regex-dos.yaml", "description": "Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-regex-dos.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb", "category": "security", "cwe": ["CWE-1333: Inefficient Regular Expression Complexity"], "owasp": ["A03:2017 - Sensitive Data Exposure"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A09:2021 - Security Logging and Monitoring Failures": {"terraform": [{"file_path": "../terraform/aws/security/aws-config-aggregator-not-all-regions.yaml", "description": "The AWS configuration aggregator does not aggregate all AWS Config region. This may result in unmonitored configuration in regions that are thought to be unused. Configure the aggregator with all_regions for the source.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-config-aggregator-not-all-regions.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A09:2021 - Security Logging and Monitoring Failures"], "cwe": ["CWE-778: Insufficient Logging"], "references": ["https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "HIGH"}}]}, "A6: Security Misconfiguration": {"terraform": [{"file_path": "../terraform/aws/security/aws-lambda-permission-unrestricted-source-arn.yaml", "description": "The AWS Lambda permission has an AWS service principal but does not specify a source ARN. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. Set the source_arn value to the ARN of the AWS resource that invokes the function, eg. an S3 bucket, CloudWatch Events Rule, API Gateway, or SNS topic.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-lambda-permission-unrestricted-source-arn.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A05:2021 - Security Misconfiguration"], "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "references": ["https://cwe.mitre.org/data/definitions/732.html", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_permission", "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}], "python": [{"file_path": "../python/flask/security/audit/debug-enabled.yaml", "description": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/audit/debug-enabled.yaml", "metadata": {"cwe": ["CWE-489: Active Debug Code"], "owasp": "A06:2017 - Security Misconfiguration", "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"], "category": "security", "technology": ["flask"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}], "scala": [{"file_path": "../scala/lang/security/audit/xmlinputfactory-dtd-enabled.yaml", "description": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/xmlinputfactory-dtd-enabled.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "source-rule-url": "https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html", "category": "security", "technology": ["scala"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../scala/lang/security/audit/sax-dtd-enabled.yaml", "description": "XML processor being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/sax-dtd-enabled.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "source-rule-url": "https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html", "category": "security", "technology": ["scala"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../scala/lang/security/audit/documentbuilder-dtd-enabled.yaml", "description": "Document Builder being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/documentbuilder-dtd-enabled.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "source-rule-url": "https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html", "category": "security", "technology": ["scala"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/lang/security/xxe/xmldocument-unsafe-parser-override.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmldocument-unsafe-parser-override.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}, {"file_path": "../csharp/lang/security/xxe/xmlreadersettings-unsafe-parser-override.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmlreadersettings-unsafe-parser-override.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}, {"file_path": "../csharp/lang/security/xxe/xmltextreader-unsafe-defaults.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmltextreader-unsafe-defaults.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/express-xml2json-xxe.yaml", "description": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-xml2json-xxe.yaml", "metadata": {"owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/xml2json"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-expat-xxe.yaml", "description": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-expat-xxe.yaml", "metadata": {"interfile": true, "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://github.com/astro/node-expat"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A1: Injection": {"go": [{"file_path": "../go/gorm/security/audit/gorm-dangerous-methods-usage.yaml", "description": "Detected usage of dangerous method $METHOD which does not escape inputs (see link in references). If the argument is user-controlled, this can lead to SQL injection. When using $METHOD function, do not trust user-submitted data and only allow approved list of input (possibly, use an allowlist approach).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/gorm/security/audit/gorm-dangerous-methods-usage.yaml", "metadata": {"category": "security", "technology": ["gorm"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://gorm.io/docs/security.html#SQL-injection-Methods", "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "interfile": true}}, {"file_path": "../go/gorm/security/audit/gorm-dangerous-methods-usage.yaml", "description": "Detected usage of dangerous method $METHOD which does not escape inputs (see link in references). If the argument is user-controlled, this can lead to SQL injection. When using $METHOD function, do not trust user-submitted data and only allow approved list of input (possibly, use an allowlist approach).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/gorm/security/audit/gorm-dangerous-methods-usage.yaml", "metadata": {"category": "security", "technology": ["gorm"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://gorm.io/docs/security.html#SQL-injection-Methods", "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "interfile": true}}, {"file_path": "../go/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/aws-lambda/security/database-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/aws-lambda/security/database-sqli.yaml", "metadata": {"references": ["https://pkg.go.dev/database/sql#DB.Query"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "database", "sql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/aws-lambda/security/database-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/aws-lambda/security/database-sqli.yaml", "metadata": {"references": ["https://pkg.go.dev/database/sql#DB.Query"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "database", "sql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/lang/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://golang.org/doc/database/sql-injection", "https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/"], "category": "security", "technology": ["go"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://golang.org/doc/database/sql-injection", "https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/"], "category": "security", "technology": ["go"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["go"], "references": ["https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "python": [{"file_path": "../python/flask/security/injection/raw-html-concat.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/raw-html-concat.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["flask"], "references": ["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "category": "security", "technology": ["sqlalchemy", "flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "category": "security", "technology": ["sqlalchemy", "flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/csv-writer-injection.yaml", "description": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/csv-writer-injection.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1236: Improper Neutralization of Formula Elements in a CSV File"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/raphaelm/defusedcsv", "https://owasp.org/www-community/attacks/CSV_Injection", "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"], "technology": ["python", "flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/csv-writer-injection.yaml", "description": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/csv-writer-injection.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1236: Improper Neutralization of Formula Elements in a CSV File"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/raphaelm/defusedcsv", "https://owasp.org/www-community/attacks/CSV_Injection", "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"], "technology": ["python", "flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/subprocess-injection.yaml", "description": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/subprocess-injection.yaml", "metadata": {"category": "security", "technology": ["flask"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/subprocess-injection.yaml", "description": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/subprocess-injection.yaml", "metadata": {"category": "security", "technology": ["flask"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../python/pyramid/security/direct-use-of-response.yaml", "description": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pyramid/security/direct-use-of-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["pyramid"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/pymssql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/pymssql-sqli.yaml", "metadata": {"references": ["https://pypi.org/project/pymssql/"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "pymssql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/pymssql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/pymssql-sqli.yaml", "metadata": {"references": ["https://pypi.org/project/pymssql/"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "pymssql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/mysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/mysql-sqli.yaml", "metadata": {"references": ["https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html", "https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/mysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/mysql-sqli.yaml", "metadata": {"references": ["https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html", "https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dynamodb-filter-injection.yaml", "description": "Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dynamodb-filter-injection.yaml", "metadata": {"cwe": ["CWE-943: Improper Neutralization of Special Elements in Data Query Logic"], "owasp": ["A01:2017 - Injection"], "category": "security", "technology": ["python", "boto3", "aws-lambda", "dynamodb"], "references": ["https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-system-call.yaml", "description": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-system-call.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-system-call.yaml", "description": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-system-call.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-shell.yaml", "description": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-shell.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-shell.yaml", "description": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-shell.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-html-response.yaml", "description": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-html-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/pymysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/pymysql-sqli.yaml", "metadata": {"references": ["https://pypi.org/project/PyMySQL/#id4"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "pymysql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/pymysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/pymysql-sqli.yaml", "metadata": {"references": ["https://pypi.org/project/PyMySQL/#id4"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "pymysql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-subprocess-use.yaml", "description": "Detected subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-subprocess-use.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-subprocess-use.yaml", "description": "Detected subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-subprocess-use.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-code-exec.yaml", "description": "Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-code-exec.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-spawn-process.yaml", "description": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-spawn-process.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-spawn-process.yaml", "description": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-spawn-process.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/sqlalchemy-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/sqlalchemy-sqli.yaml", "metadata": {"references": ["https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sqlalchemy"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/sqlalchemy-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/sqlalchemy-sqli.yaml", "metadata": {"references": ["https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sqlalchemy"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-create-exec.yaml", "description": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-create-exec.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-create-exec.yaml", "description": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-create-exec.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-exec.yaml", "description": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-exec.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-exec.yaml", "description": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-exec.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/psycopg-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/psycopg-sqli.yaml", "metadata": {"references": ["https://www.psycopg.org/docs/cursor.html#cursor.execute", "https://www.psycopg.org/docs/cursor.html#cursor.executemany", "https://www.psycopg.org/docs/cursor.html#cursor.mogrify"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "psycopg", "psycopg2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/psycopg-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/psycopg-sqli.yaml", "metadata": {"references": ["https://www.psycopg.org/docs/cursor.html#cursor.execute", "https://www.psycopg.org/docs/cursor.html#cursor.executemany", "https://www.psycopg.org/docs/cursor.html#cursor.mogrify"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "psycopg", "psycopg2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-os-exec.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-os-exec.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "confidence": "MEDIUM", "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-os-exec.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-os-exec.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "confidence": "MEDIUM", "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-spawn-process.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-spawn-process.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-spawn-process.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-spawn-process.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/django/security/injection/csv-writer-injection.yaml", "description": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/csv-writer-injection.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1236: Improper Neutralization of Formula Elements in a CSV File"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/raphaelm/defusedcsv", "https://owasp.org/www-community/attacks/CSV_Injection", "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"], "technology": ["django", "python"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM"}}, {"file_path": "../python/django/security/injection/csv-writer-injection.yaml", "description": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/csv-writer-injection.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1236: Improper Neutralization of Formula Elements in a CSV File"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/raphaelm/defusedcsv", "https://owasp.org/www-community/attacks/CSV_Injection", "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"], "technology": ["django", "python"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM"}}, {"file_path": "../python/django/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["django"], "references": ["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render", "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/audit/sqli/tainted-sql-from-http-request.yaml", "description": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/sqli/tainted-sql-from-http-request.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH", "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html", "https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["sql", "java", "servlets", "spring"]}}, {"file_path": "../java/lang/security/audit/sqli/tainted-sql-from-http-request.yaml", "description": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/sqli/tainted-sql-from-http-request.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH", "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html", "https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["sql", "java", "servlets", "spring"]}}, {"file_path": "../java/spring/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["spring"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/spring/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["spring"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/spring/security/injection/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["java", "spring"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/assert-use.yaml", "description": "Calling assert with user input is equivalent to eval'ing.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/assert-use.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "references": ["https://www.php.net/manual/en/function.assert", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php"], "category": "security", "technology": ["php"], "confidence": "HIGH", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../php/lang/security/file-inclusion.yaml", "description": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/file-inclusion.yaml", "metadata": {"cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "category": "security", "technology": ["php"], "owasp": ["A03:2021 - Injection"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../php/lang/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "technology": ["php"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "technology": ["php"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/injection/echoed-request.yaml", "description": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/echoed-request.yaml", "metadata": {"technology": ["php"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/en/reserved.variables.request.php", "https://www.php.net/manual/en/reserved.variables.post.php", "https://www.php.net/manual/en/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/injection/tainted-object-instantiation.yaml", "description": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-object-instantiation.yaml", "metadata": {"cwe": ["CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')"], "category": "security", "technology": ["php"], "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-sql-injection.yaml", "description": "Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-sql-injection.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "category": "security", "technology": ["laravel"], "references": ["https://laravel.com/docs/8.x/queries"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-sql-injection.yaml", "description": "Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-sql-injection.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "category": "security", "technology": ["laravel"], "references": ["https://laravel.com/docs/8.x/queries"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-unsafe-validator.yaml", "description": "Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-unsafe-validator.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["php", "laravel"], "references": ["https://laravel.com/docs/9.x/validation#rule-unique"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-unsafe-validator.yaml", "description": "Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-unsafe-validator.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["php", "laravel"], "references": ["https://laravel.com/docs/9.x/validation#rule-unique"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-api-route-sql-injection.yaml", "description": "HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-api-route-sql-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md"], "technology": ["php", "laravel"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-api-route-sql-injection.yaml", "description": "HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-api-route-sql-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md"], "technology": ["php", "laravel"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "bash": [{"file_path": "../bash/curl/security/curl-eval.yaml", "description": "Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/bash/curl/security/curl-eval.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "category": "security", "technology": ["bash", "curl"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "scala": [{"file_path": "../scala/play/security/tainted-sql-from-http-request.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-sql-from-http-request.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["scala", "play"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../scala/play/security/tainted-sql-from-http-request.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-sql-from-http-request.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["scala", "play"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../scala/play/security/tainted-html-response.yaml", "description": "Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-html-response.yaml", "metadata": {"category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "technology": ["scala", "play"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../scala/play/security/tainted-slick-sqli.yaml", "description": "Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-slick-sqli.yaml", "metadata": {"references": ["https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values", "https://scala-slick.org/doc/3.2.0/sql-to-slick.html#non-optimal-sql-code"], "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["scala", "slick", "play"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../scala/play/security/tainted-slick-sqli.yaml", "description": "Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-slick-sqli.yaml", "metadata": {"references": ["https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values", "https://scala-slick.org/doc/3.2.0/sql-to-slick.html#non-optimal-sql-code"], "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["scala", "slick", "play"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/dotnet/security/razor-template-injection.yaml", "description": "User-controllable string passed to Razor.Parse. This leads directly to code execution in the context of the process.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/razor-template-injection.yaml", "metadata": {"likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "owasp": ["A03:2021 - Injection"], "references": ["https://clement.notin.org/blog/2020/04/15/Server-Side-Template-Injection-(SSTI)-in-ASP.NET-Razor/"], "subcategory": ["vuln"], "technology": [".net", "razor", "asp"]}}], "javascript": [{"file_path": "../javascript/express/security/express-vm2-injection.yaml", "description": "Make sure that unverified user data can not reach `vm2`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-vm2-injection.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-vm-injection.yaml", "description": "Make sure that unverified user data can not reach `$VM`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-vm-injection.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-insecure-template-usage.yaml", "description": "User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-insecure-template-usage.yaml", "metadata": {"interfile": true, "category": "security", "cwe": ["CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine"], "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "technology": ["javascript", "typescript", "express", "pug", "jade", "dot", "ejs", "nunjucks", "lodash", "handlbars", "mustache", "hogan.js", "eta", "squirrelly"], "source_rule_url": ["https://github.com/github/codeql/blob/2ba2642c7ab29b9eedef33bcc2b8cd1d203d0c10/javascript/ql/test/query-tests/Security/CWE-094/CodeInjection/template-sinks.js"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-insecure-template-usage.yaml", "description": "User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-insecure-template-usage.yaml", "metadata": {"interfile": true, "category": "security", "cwe": ["CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine"], "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "technology": ["javascript", "typescript", "express", "pug", "jade", "dot", "ejs", "nunjucks", "lodash", "handlbars", "mustache", "hogan.js", "eta", "squirrelly"], "source_rule_url": ["https://github.com/github/codeql/blob/2ba2642c7ab29b9eedef33bcc2b8cd1d203d0c10/javascript/ql/test/query-tests/Security/CWE-094/CodeInjection/template-sinks.js"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-sandbox-injection.yaml", "description": "Make sure that unverified user data can not reach `sandbox`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-sandbox-injection.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/injection/tainted-sql-string.yaml", "metadata": {"owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "technology": ["express"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/injection/raw-html-format.yaml", "description": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-element-taint.yaml", "description": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-element-taint.yaml", "metadata": {"confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://docs.angularjs.org/api/ng/function/angular.element", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "technology": ["angularjs"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-trust-as-method.yaml", "description": "The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-trust-as-method.yaml", "metadata": {"references": ["https://docs.angularjs.org/api/ng/service/$sce", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "technology": ["angular"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-sce-disabled.yaml", "description": "$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-sce-disabled.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://docs.angularjs.org/api/ng/service/$sce", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "technology": ["angular"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../javascript/angular/security/detect-angular-element-methods.yaml", "description": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-element-methods.yaml", "metadata": {"confidence": "LOW", "references": ["https://docs.angularjs.org/api/ng/function/angular.element", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "technology": ["angularjs"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/tainted-html-response.yaml", "description": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-html-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/vm-runincontext-injection.yaml", "description": "The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/vm-runincontext-injection.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "category": "security", "technology": ["javascript", "aws-lambda"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/lang/security/detect-eval-with-expression.yaml", "description": "Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/detect-eval-with-expression.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js", "references": ["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!"], "category": "security", "technology": ["javascript"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/lang/security/audit/code-string-concat.yaml", "description": "Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/audit/code-string-concat.yaml", "metadata": {"interfile": true, "confidence": "HIGH", "owasp": ["A03:2021 - Injection"], "cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "references": ["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval", "https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback", "https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/", "https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html"], "category": "security", "technology": ["node.js", "Express", "Next.js"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../javascript/browser/security/raw-html-concat.yaml", "description": "User controlled data in a HTML string may result in XSS", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/browser/security/raw-html-concat.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/xss/"], "category": "security", "technology": ["browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/lang/security/no-eval.yaml", "description": "Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/no-eval.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe2022-top25": true, "cwe2021-top25": true, "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_evaluation.rb", "subcategory": ["vuln"], "technology": ["ruby", "rails"]}}, {"file_path": "../ruby/rails/security/brakeman/check-sql.yaml", "description": "Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-sql.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_sql.rb", "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-sql.yaml", "description": "Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-sql.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_sql.rb", "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-unsafe-reflection-methods.yaml", "description": "Found user-controllable input to a reflection method. This may allow a user to alter program behavior and potentially execute arbitrary instructions in the context of the process. Do not provide arbitrary user input to `tap`, `method`, or `to_proc`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-unsafe-reflection-methods.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection_methods.rb", "category": "security", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "technology": ["ruby", "rails"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/groups_controller.rb"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-unsafe-reflection.yaml", "description": "Found user-controllable input to Ruby reflection functionality. This allows a remote user to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable input.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-unsafe-reflection.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection.rb", "category": "security", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "technology": ["ruby", "rails"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails2/app/controllers/application_controller.rb"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/", "https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A07:2021 - Identification and Authentication Failures": {"go": [{"file_path": "../go/jwt-go/security/jwt.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/jwt-go/security/jwt.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "category": "security", "technology": ["jwt", "secrets"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "interfile": true}}], "python": [{"file_path": "../python/boto3/security/hardcoded-token.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/boto3/security/hardcoded-token.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html", "https://bento.dev/checks/boto3/hardcoded-access-token/", "https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "category": "security", "technology": ["boto3", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/java-jwt/security/jwt-hardcode.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/java-jwt/security/jwt-hardcode.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "technology": ["java", "secrets", "jwt"], "category": "security", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "HIGH"}}], "csharp": [{"file_path": "../csharp/lang/security/ad/jwt-tokenvalidationparameters-no-expiry-validation.yaml", "description": "The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the JWT tokens lifetime is not validated. This can lead to an JWT token being used after it has expired, which has security implications. It is recommended to validate the JWT lifetime to ensure only valid tokens are used.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/ad/jwt-tokenvalidationparameters-no-expiry-validation.yaml", "metadata": {"category": "security", "technology": ["csharp"], "owasp": ["A02:2017 - Broken Authentication", "A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-613: Insufficient Session Expiration"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/", "https://cwe.mitre.org/data/definitions/613.html", "https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.tokens.tokenvalidationparameters?view=azure-dotnet"], "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}], "javascript": [{"file_path": "../javascript/express/security/express-jwt-hardcoded-secret.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-jwt-hardcoded-secret.yaml", "metadata": {"interfile": true, "cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "category": "security", "technology": ["express", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../javascript/express/security/cors-misconfiguration.yaml", "description": "By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/cors-misconfiguration.yaml", "metadata": {"owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-346: Origin Validation Error"], "category": "security", "references": ["https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"], "technology": ["express"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/jsonwebtoken/security/jwt-hardcode.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/jsonwebtoken/security/jwt-hardcode.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.2 Static API keys or secret", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["jwt", "javascript", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../javascript/jose/security/jwt-hardcode.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/jose/security/jwt-hardcode.yaml", "metadata": {"interfile": true, "cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.2 Static API keys or secret", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["jose", "jwt", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../javascript/passport-jwt/security/passport-hardcode.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/passport-jwt/security/passport-hardcode.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.2 Static API keys or secret", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["jwt", "nodejs", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}], "ruby": [{"file_path": "../ruby/lang/security/hardcoded-http-auth-in-controller.yaml", "description": "Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/hardcoded-http-auth-in-controller.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/basic_auth/index.markdown", "category": "security", "technology": ["ruby", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../ruby/lang/security/hardcoded-secret-rsa-passphrase.yaml", "description": "Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/hardcoded-secret-rsa-passphrase.yaml", "metadata": {"technology": ["ruby", "secrets"], "category": "security", "references": ["https://cwe.mitre.org/data/definitions/522.html"], "cwe": ["CWE-798: Use of Hard-coded Credentials"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "HIGH"}}]}, "A5: Broken Access Control": {"go": [{"file_path": "../go/lang/security/filepath-clean-misuse.yaml", "description": "`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/filepath-clean-misuse.yaml", "metadata": {"references": ["https://pkg.go.dev/path#Clean", "http://technosophos.com/2016/03/31/go-quickly-cleaning-filepaths.html", "https://labs.detectify.com/2021/12/15/zero-day-path-traversal-grafana/", "https://dzx.cz/2021/04/02/go_path_traversal/", "https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "category": "security", "technology": ["go"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/filepath-clean-misuse.yaml", "description": "`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/filepath-clean-misuse.yaml", "metadata": {"references": ["https://pkg.go.dev/path#Clean", "http://technosophos.com/2016/03/31/go-quickly-cleaning-filepaths.html", "https://labs.detectify.com/2021/12/15/zero-day-path-traversal-grafana/", "https://dzx.cz/2021/04/02/go_path_traversal/", "https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "category": "security", "technology": ["go"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/audit/net/bind_all.yaml", "description": "Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/net/bind_all.yaml", "metadata": {"cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "owasp": ["A01:2021 - Broken Access Control"], "source-rule-url": "https://github.com/securego/gosec", "category": "security", "technology": ["go"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}], "python": [{"file_path": "../python/flask/security/audit/app-run-param-config.yaml", "description": "Running flask app with host 0.0.0.0 could expose the server publicly.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/audit/app-run-param-config.yaml", "metadata": {"cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"], "owasp": ["A01:2021 - Broken Access Control"], "category": "security", "technology": ["flask"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../python/lang/security/audit/network/bind.yaml", "description": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/network/bind.yaml", "metadata": {"cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "owasp": ["A01:2021 - Broken Access Control"], "category": "security", "technology": ["python"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}], "java": [{"file_path": "../java/lang/security/httpservlet-path-traversal.yaml", "description": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/httpservlet-path-traversal.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN", "references": ["https://www.owasp.org/index.php/Path_Traversal"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/httpservlet-path-traversal.yaml", "description": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/httpservlet-path-traversal.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN", "references": ["https://www.owasp.org/index.php/Path_Traversal"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/lang/security/open-redirect.yaml", "description": "A query string parameter may contain a URL value that could cause the web application to redirect the request to a malicious website controlled by an attacker. Make sure to sanitize this parameter sufficiently.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/open-redirect.yaml", "metadata": {"category": "security", "technology": ["csharp"], "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "references": ["https://cwe.mitre.org/data/definitions/601.html"], "owasp": ["A01:2021 - Broken Access Control"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../csharp/lang/security/filesystem/unsafe-path-combine.yaml", "description": "String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/filesystem/unsafe-path-combine.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "references": ["https://www.praetorian.com/blog/pathcombine-security-issues-in-aspnet-applications/", "https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-6.0#remarks"], "technology": [".net"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../csharp/lang/security/filesystem/unsafe-path-combine.yaml", "description": "String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/filesystem/unsafe-path-combine.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "references": ["https://www.praetorian.com/blog/pathcombine-security-issues-in-aspnet-applications/", "https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-6.0#remarks"], "technology": [".net"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/require-request.yaml", "description": "If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/require-request.yaml", "metadata": {"interfile": true, "owasp": ["A01:2021 - Broken Access Control"], "cwe": ["CWE-706: Use of Incorrectly-Resolved Name or Reference"], "source-rule-url": "https://nodesecroadmap.fyi/chapter-1/threat-UIR.html", "category": "security", "technology": ["express"], "references": ["https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/audit/express-open-redirect.yaml", "description": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-open-redirect.yaml", "metadata": {"technology": ["express"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"], "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "category": "security", "owasp": ["A01:2021 - Broken Access Control"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]"}}, {"file_path": "../javascript/lang/security/insecure-object-assign.yaml", "description": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/insecure-object-assign.yaml", "metadata": {"cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html", "https://en.wikipedia.org/wiki/Mass_assignment_vulnerability"], "category": "security", "technology": ["javascript"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../javascript/browser/security/open-redirect.yaml", "description": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/browser/security/open-redirect.yaml", "metadata": {"interfile": true, "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "owasp": ["A01:2021 - Broken Access Control"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.1 Insecue Redirect", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation", "version": "4"}, "category": "security", "confidence": "HIGH", "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"], "technology": ["browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../javascript/browser/security/open-redirect-from-function.yaml", "description": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/browser/security/open-redirect-from-function.yaml", "metadata": {"confidence": "LOW", "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "owasp": ["A01:2021 - Broken Access Control"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.1 Insecue Redirect", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation", "version": "4"}, "category": "security", "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"], "technology": ["browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/rails/security/brakeman/check-redirect-to.yaml", "description": "Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to` without the `:only_path => true` hash value.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-redirect-to.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_redirect.rb", "category": "security", "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "technology": ["ruby", "rails"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"], "owasp": ["A01:2021 - Broken Access Control"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A10:2021 - Server-Side Request Forgery (SSRF)": {"go": [{"file_path": "../go/lang/security/injection/tainted-url-host.yaml", "description": "A request was found to be crafted from user-input `$REQUEST`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://goteleport.com/blog/ssrf-attacks/"], "category": "security", "technology": ["go"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "interfile": true}}], "python": [{"file_path": "../python/flask/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["flask"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["flask"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "LOW"}}], "java": [{"file_path": "../java/spring/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["java", "spring"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}], "php": [{"file_path": "../php/lang/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["php"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/injection/tainted-filename.yaml", "description": "File name based on user input risks server-side request forgery.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-filename.yaml", "metadata": {"technology": ["php"], "category": "security", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/express-phantom-injection.yaml", "description": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-phantom-injection.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "category": "security", "technology": ["express"], "references": ["https://phantomjs.org/page-automation.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-wkhtml-injection.yaml", "description": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-wkhtml-injection.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/wkhtmltopdf"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../javascript/express/security/express-wkhtml-injection.yaml", "description": "If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-wkhtml-injection.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/wkhtmltopdf"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../javascript/express/security/express-puppeteer-injection.yaml", "description": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-puppeteer-injection.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "category": "security", "technology": ["express"], "references": ["https://pptr.dev/api/puppeteer.page"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A7: Cross-Site Scripting (XSS)": {"go": [{"file_path": "../go/lang/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["go"], "references": ["https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "python": [{"file_path": "../python/flask/security/injection/raw-html-concat.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/raw-html-concat.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["flask"], "references": ["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pyramid/security/direct-use-of-response.yaml", "description": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pyramid/security/direct-use-of-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["pyramid"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-html-response.yaml", "description": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-html-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["django"], "references": ["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render", "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/spring/security/injection/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["java", "spring"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/injection/echoed-request.yaml", "description": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/echoed-request.yaml", "metadata": {"technology": ["php"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/en/reserved.variables.request.php", "https://www.php.net/manual/en/reserved.variables.post.php", "https://www.php.net/manual/en/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "scala": [{"file_path": "../scala/play/security/tainted-html-response.yaml", "description": "Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-html-response.yaml", "metadata": {"category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "technology": ["scala", "play"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/injection/tainted-sql-string.yaml", "metadata": {"owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "technology": ["express"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/injection/raw-html-format.yaml", "description": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-element-taint.yaml", "description": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-element-taint.yaml", "metadata": {"confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://docs.angularjs.org/api/ng/function/angular.element", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "technology": ["angularjs"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-trust-as-method.yaml", "description": "The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-trust-as-method.yaml", "metadata": {"references": ["https://docs.angularjs.org/api/ng/service/$sce", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "technology": ["angular"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-sce-disabled.yaml", "description": "$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-sce-disabled.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://docs.angularjs.org/api/ng/service/$sce", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "technology": ["angular"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../javascript/angular/security/detect-angular-element-methods.yaml", "description": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-element-methods.yaml", "metadata": {"confidence": "LOW", "references": ["https://docs.angularjs.org/api/ng/function/angular.element", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "technology": ["angularjs"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/tainted-html-response.yaml", "description": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-html-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/browser/security/raw-html-concat.yaml", "description": "User controlled data in a HTML string may result in XSS", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/browser/security/raw-html-concat.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/xss/"], "category": "security", "technology": ["browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/rails/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/", "https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A2: Broken Authentication": {"python": [{"file_path": "../python/jwt/security/jwt-hardcode.yaml", "description": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/jwt/security/jwt-hardcode.yaml", "metadata": {"cwe": ["CWE-522: Insufficiently Protected Credentials"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "category": "security", "technology": ["jwt"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}], "scala": [{"file_path": "../scala/jwt-scala/security/jwt-scala-hardcode.yaml", "description": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/jwt-scala/security/jwt-scala-hardcode.yaml", "metadata": {"references": ["https://jwt-scala.github.io/jwt-scala/"], "category": "security", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "technology": ["scala"], "confidence": "HIGH", "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../scala/scala-jwt/security/jwt-hardcode.yaml", "description": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/scala-jwt/security/jwt-hardcode.yaml", "metadata": {"category": "security", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "technology": ["jwt"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/lang/security/ad/jwt-tokenvalidationparameters-no-expiry-validation.yaml", "description": "The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the JWT tokens lifetime is not validated. This can lead to an JWT token being used after it has expired, which has security implications. It is recommended to validate the JWT lifetime to ensure only valid tokens are used.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/ad/jwt-tokenvalidationparameters-no-expiry-validation.yaml", "metadata": {"category": "security", "technology": ["csharp"], "owasp": ["A02:2017 - Broken Authentication", "A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-613: Insufficient Session Expiration"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/", "https://cwe.mitre.org/data/definitions/613.html", "https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.tokens.tokenvalidationparameters?view=azure-dotnet"], "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}]}, "A04:2021 - Insecure Design": {"python": [{"file_path": "../python/jwt/security/jwt-hardcode.yaml", "description": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/jwt/security/jwt-hardcode.yaml", "metadata": {"cwe": ["CWE-522: Insufficiently Protected Credentials"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "category": "security", "technology": ["jwt"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}], "scala": [{"file_path": "../scala/jwt-scala/security/jwt-scala-hardcode.yaml", "description": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/jwt-scala/security/jwt-scala-hardcode.yaml", "metadata": {"references": ["https://jwt-scala.github.io/jwt-scala/"], "category": "security", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "technology": ["scala"], "confidence": "HIGH", "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../scala/scala-jwt/security/jwt-hardcode.yaml", "description": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/scala-jwt/security/jwt-hardcode.yaml", "metadata": {"category": "security", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "technology": ["jwt"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/x-frame-options-misconfiguration.yaml", "description": "By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/x-frame-options-misconfiguration.yaml", "metadata": {"references": ["https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"], "owasp": ["A04:2021 - Insecure Design"], "cwe": ["CWE-451: User Interface (UI) Misrepresentation of Critical Information"], "category": "security", "technology": ["express"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/lang/security/force-ssl-false.yaml", "description": "Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/force-ssl-false.yaml", "metadata": {"cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb"], "category": "security", "technology": ["ruby"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../ruby/rails/security/brakeman/check-send-file.yaml", "description": "Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-send-file.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send_file.rb", "category": "security", "cwe": ["CWE-73: External Control of File Name or Path"], "owasp": ["A04:2021 - Insecure Design"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/www-community/attacks/Path_Traversal", "https://owasp.org/Top10/A01_2021-Broken_Access_Control/"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "Not OWASP Related": {"python": [{"file_path": "../python/flask/security/injection/nan-injection.yaml", "description": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/nan-injection.yaml", "metadata": {"references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "category": "security", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "technology": ["flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/nan-injection.yaml", "description": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/nan-injection.yaml", "metadata": {"references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "category": "security", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "technology": ["django"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}], "rust": [{"file_path": "../rust/lang/security/insecure-hashes.yml", "description": "Detected cryptographically insecure hashing function", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/rust/lang/security/insecure-hashes.yml", "metadata": {"references": ["https://github.com/RustCrypto/hashes", "https://docs.rs/md2/latest/md2/", "https://docs.rs/md4/latest/md4/", "https://docs.rs/md5/latest/md5/", "https://docs.rs/sha-1/latest/sha1/"], "technology": ["rust"], "category": "security", "cwe": "CWE-328: Use of Weak Hash", "confidence": "HIGH", "likelihood": "LOW", "impact": "MEDIUM", "subcategory": "audit"}}, {"file_path": "../rust/lang/security/reqwest-accept-invalid.yml", "description": "Dangerously accepting invalid TLS information", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/rust/lang/security/reqwest-accept-invalid.yml", "metadata": {"references": ["https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.danger_accept_invalid_hostnames", "https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.danger_accept_invalid_certs"], "technology": ["reqwest"], "category": "security", "cwe": "CWE-295: Improper Certificate Validation", "confidence": "HIGH", "likelihood": "LOW", "impact": "MEDIUM", "subcategory": "vuln"}}, {"file_path": "../rust/lang/security/rustls-dangerous.yml", "description": "Dangerous client config used, ensure SSL verification", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/rust/lang/security/rustls-dangerous.yml", "metadata": {"references": ["https://docs.rs/rustls/latest/rustls/client/struct.DangerousClientConfig.html", "https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#method.dangerous"], "technology": ["rustls"], "category": "security", "cwe": "CWE-295: Improper Certificate Validation", "confidence": "HIGH", "likelihood": "LOW", "impact": "MEDIUM", "subcategory": "vuln"}}, {"file_path": "../rust/lang/security/ssl-verify-none.yml", "description": "SSL verification disabled, this allows for MitM attacks", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/rust/lang/security/ssl-verify-none.yml", "metadata": {"references": ["https://docs.rs/openssl/latest/openssl/ssl/struct.SslContextBuilder.html#method.set_verify"], "technology": ["openssl"], "category": "security", "cwe": "CWE-295: Improper Certificate Validation", "confidence": "HIGH", "likelihood": "LOW", "impact": "MEDIUM", "subcategory": "vuln"}}], "ruby": [{"file_path": "../ruby/lang/security/divide-by-zero.yaml", "description": "Detected a possible ZeroDivisionError.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/divide-by-zero.yaml", "metadata": {"cwe": ["CWE-369: Divide By Zero"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb"], "category": "security", "technology": ["ruby"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}]}, "A08:2017 - Insecure Deserialization": {"python": [{"file_path": "../python/aws-lambda/security/tainted-pickle-deserialization.yaml", "description": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-pickle-deserialization.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://docs.python.org/3/library/pickle.html", "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"], "category": "security", "technology": ["python", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/deserialization.yaml", "description": "Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/deserialization.yaml", "metadata": {"category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["php"], "references": ["https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A08:2021 - Software and Data Integrity Failures": {"python": [{"file_path": "../python/aws-lambda/security/tainted-pickle-deserialization.yaml", "description": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-pickle-deserialization.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://docs.python.org/3/library/pickle.html", "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"], "category": "security", "technology": ["python", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/deserialization.yaml", "description": "Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/deserialization.yaml", "metadata": {"category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["php"], "references": ["https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/express-data-exfiltration.yaml", "description": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-data-exfiltration.yaml", "metadata": {"owasp": ["A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "references": ["https://en.wikipedia.org/wiki/Mass_assignment_vulnerability", "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html"], "category": "security", "technology": ["express"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "LOW"}}]}, "A04:2017 - XML External Entities (XXE)": {"scala": [{"file_path": "../scala/lang/security/audit/xmlinputfactory-dtd-enabled.yaml", "description": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/xmlinputfactory-dtd-enabled.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "source-rule-url": "https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html", "category": "security", "technology": ["scala"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../scala/lang/security/audit/sax-dtd-enabled.yaml", "description": "XML processor being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/sax-dtd-enabled.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "source-rule-url": "https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html", "category": "security", "technology": ["scala"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../scala/lang/security/audit/documentbuilder-dtd-enabled.yaml", "description": "Document Builder being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/documentbuilder-dtd-enabled.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "source-rule-url": "https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html", "category": "security", "technology": ["scala"], "confidence": "HIGH", "references": ["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/lang/security/xxe/xmldocument-unsafe-parser-override.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmldocument-unsafe-parser-override.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}, {"file_path": "../csharp/lang/security/xxe/xmlreadersettings-unsafe-parser-override.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmlreadersettings-unsafe-parser-override.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}, {"file_path": "../csharp/lang/security/xxe/xmltextreader-unsafe-defaults.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmltextreader-unsafe-defaults.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/express-xml2json-xxe.yaml", "description": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-xml2json-xxe.yaml", "metadata": {"owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/xml2json"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-expat-xxe.yaml", "description": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-expat-xxe.yaml", "metadata": {"interfile": true, "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://github.com/astro/node-expat"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}}