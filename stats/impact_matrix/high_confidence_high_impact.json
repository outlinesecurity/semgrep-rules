{"A1: Injection": {"python": [{"file_path": "../python/pyramid/security/sqlalchemy-sql-injection.yaml", "description": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pyramid/security/sqlalchemy-sql-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data"], "technology": ["pyramid"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/pyramid/security/sqlalchemy-sql-injection.yaml", "description": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pyramid/security/sqlalchemy-sql-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data"], "technology": ["pyramid"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-subinterpreters-run-string.yaml", "description": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-subinterpreters-run-string.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://bugs.python.org/issue43472", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-system-call.yaml", "description": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-system-call.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-system-call.yaml", "description": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-system-call.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-subprocess-use.yaml", "description": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-subprocess-use.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-subprocess-use.yaml", "description": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-subprocess-use.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-testcapi-run-in-subinterp.yaml", "description": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-testcapi-run-in-subinterp.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-code-run.yaml", "description": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-code-run.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/django/security/injection/command/subprocess-injection.yaml", "description": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/command/subprocess-injection.yaml", "metadata": {"category": "security", "technology": ["flask"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/django/security/injection/command/subprocess-injection.yaml", "description": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/command/subprocess-injection.yaml", "metadata": {"category": "security", "technology": ["flask"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}], "java": [{"file_path": "../java/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/aws-lambda/security/tainted-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/aws-lambda/security/tainted-sqli.yaml", "metadata": {"category": "security", "technology": ["sql", "java", "aws-lambda"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/aws-lambda/security/tainted-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/aws-lambda/security/tainted-sqli.yaml", "metadata": {"category": "security", "technology": ["sql", "java", "aws-lambda"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/spring/security/injection/tainted-system-command.yaml", "description": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-system-command.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["java", "spring"], "confidence": "HIGH", "references": ["https://www.stackhawk.com/blog/command-injection-java/", "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html", "https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}, {"file_path": "../java/spring/security/injection/tainted-system-command.yaml", "description": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-system-command.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["java", "spring"], "confidence": "HIGH", "references": ["https://www.stackhawk.com/blog/command-injection-java/", "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html", "https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}], "yaml": [{"file_path": "../yaml/github-actions/security/run-shell-injection.yaml", "description": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/github-actions/security/run-shell-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections", "https://securitylab.github.com/research/github-actions-untrusted-input/"], "technology": ["github-actions"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../yaml/github-actions/security/run-shell-injection.yaml", "description": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/github-actions/security/run-shell-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections", "https://securitylab.github.com/research/github-actions-untrusted-input/"], "technology": ["github-actions"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../yaml/github-actions/security/github-script-injection.yaml", "description": "Using variable interpolation `${{...}}` with `github` context data in a `actions/github-script`'s `script:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/github-actions/security/github-script-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections", "https://securitylab.github.com/research/github-actions-untrusted-input/", "https://github.com/actions/github-script"], "technology": ["github-actions"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}], "generic": [{"file_path": "../generic/ci/security/bash-reverse-shell.yaml", "description": "Semgrep found a bash reverse shell", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/ci/security/bash-reverse-shell.yaml", "metadata": {"cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "category": "security", "technology": ["ci"], "confidence": "HIGH", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "HIGH"}}], "javascript": [{"file_path": "../javascript/aws-lambda/security/tainted-eval.yaml", "description": "The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-eval.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "category": "security", "technology": ["javascript", "aws-lambda"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "LOW", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/mysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/mysql-sqli.yaml", "metadata": {"references": ["https://www.npmjs.com/package/mysql2"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql", "mysql2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/mysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/mysql-sqli.yaml", "metadata": {"references": ["https://www.npmjs.com/package/mysql2"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql", "mysql2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/sequelize-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/sequelize-sqli.yaml", "metadata": {"references": ["https://sequelize.org/master/manual/raw-queries.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sequelize"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/sequelize-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/sequelize-sqli.yaml", "metadata": {"references": ["https://sequelize.org/master/manual/raw-queries.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sequelize"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/pg-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/pg-sqli.yaml", "metadata": {"references": ["https://node-postgres.com/features/queries"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "postgres", "pg"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/pg-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/pg-sqli.yaml", "metadata": {"references": ["https://node-postgres.com/features/queries"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "postgres", "pg"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/knex-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/knex-sqli.yaml", "metadata": {"references": ["https://knexjs.org/#Builder-fromRaw", "https://knexjs.org/#Builder-whereRaw"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "knex"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/knex-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/knex-sqli.yaml", "metadata": {"references": ["https://knexjs.org/#Builder-fromRaw", "https://knexjs.org/#Builder-whereRaw"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "knex"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/dynamodb-request-object.yaml", "description": "Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/dynamodb-request-object.yaml", "metadata": {"cwe": ["CWE-943: Improper Neutralization of Special Elements in Data Query Logic"], "owasp": ["A01:2017 - Injection"], "category": "security", "technology": ["javascript", "aws-lambda", "dynamodb"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/detect-child-process.yaml", "description": "Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/detect-child-process.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["javascript", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/detect-child-process.yaml", "description": "Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/detect-child-process.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["javascript", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/lang/security/detect-child-process.yaml", "description": "Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/detect-child-process.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"], "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js", "category": "security", "technology": ["javascript"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH", "confidence": "LOW"}}, {"file_path": "../javascript/lang/security/detect-child-process.yaml", "description": "Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/detect-child-process.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"], "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js", "category": "security", "technology": ["javascript"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH", "confidence": "LOW"}}, {"file_path": "../javascript/sequelize/security/audit/sequelize-injection-express.yaml", "description": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/sequelize/security/audit/sequelize-injection-express.yaml", "metadata": {"interfile": true, "references": ["https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"], "category": "security", "technology": ["express"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]"}}, {"file_path": "../javascript/sequelize/security/audit/sequelize-injection-express.yaml", "description": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/sequelize/security/audit/sequelize-injection-express.yaml", "metadata": {"interfile": true, "references": ["https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements"], "category": "security", "technology": ["express"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]"}}], "ruby": [{"file_path": "../ruby/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/mysql2-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/mysql2-sqli.yaml", "metadata": {"references": ["https://github.com/brianmario/mysql2"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/mysql2-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/mysql2-sqli.yaml", "metadata": {"references": ["https://github.com/brianmario/mysql2"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/activerecord-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created > ?\", author_id, start_date]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/activerecord-sqli.yaml", "metadata": {"references": ["https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "active-record"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/activerecord-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created > ?\", author_id, start_date]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/activerecord-sqli.yaml", "metadata": {"references": ["https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "active-record"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/pg-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/pg-sqli.yaml", "metadata": {"references": ["https://www.rubydoc.info/gems/pg/PG/Connection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "postgres", "pg"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/pg-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/pg-sqli.yaml", "metadata": {"references": ["https://www.rubydoc.info/gems/pg/PG/Connection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "postgres", "pg"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/sequel-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/sequel-sqli.yaml", "metadata": {"references": ["https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sequel"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/sequel-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/sequel-sqli.yaml", "metadata": {"references": ["https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sequel"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/dangerous-exec.yaml", "description": "Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/dangerous-exec.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_execute.rb", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "category": "security", "technology": ["ruby", "rails"], "references": ["https://guides.rubyonrails.org/security.html#command-line-injection"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html", "https://github.com/arkadiyt/ssrf_filter"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}]}, "A3: Sensitive Data Exposure": {"clojure": [{"file_path": "../clojure/lang/security/use-of-md5.yaml", "description": "MD5 hash algorithm detected. This is not collision resistant and leads to easily-cracked password hashes. Replace with current recommended hashing algorithms.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/clojure/lang/security/use-of-md5.yaml", "metadata": {"references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html", "https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"], "technology": ["clojure"], "source-rule-url": "https://github.com/clj-holmes/clj-holmes-rules/blob/main/security/weak-hash-function-md5.yml", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "CWE-328: Use of Weak Hash"], "author": "Gabriel Marquet <gab.marquet@gmail.com>", "category": "security", "subcategory": ["vuln"], "confidence": "HIGH", "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../clojure/lang/security/use-of-md5.yaml", "description": "MD5 hash algorithm detected. This is not collision resistant and leads to easily-cracked password hashes. Replace with current recommended hashing algorithms.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/clojure/lang/security/use-of-md5.yaml", "metadata": {"references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html", "https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"], "technology": ["clojure"], "source-rule-url": "https://github.com/clj-holmes/clj-holmes-rules/blob/main/security/weak-hash-function-md5.yml", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "CWE-328: Use of Weak Hash"], "author": "Gabriel Marquet <gab.marquet@gmail.com>", "category": "security", "subcategory": ["vuln"], "confidence": "HIGH", "likelihood": "MEDIUM", "impact": "HIGH"}}]}, "A04:2017 - XML External Entities (XXE)": {"java": [{"file_path": "../java/lang/security/audit/xxe/documentbuilderfactory-external-general-entities-true.yaml", "description": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/documentbuilderfactory-external-general-entities-true.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/transformerfactory-dtds-not-disabled.yaml", "description": "DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\".", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/transformerfactory-dtds-not-disabled.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor", "https://xerces.apache.org/xerces2-j/features.html"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/documentbuilderfactory-disallow-doctype-decl-missing.yaml", "description": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/documentbuilderfactory-disallow-doctype-decl-missing.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor", "https://xerces.apache.org/xerces2-j/features.html"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/saxparserfactory-disallow-doctype-decl-missing.yaml", "description": "DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/saxparserfactory-disallow-doctype-decl-missing.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor", "https://xerces.apache.org/xerces2-j/features.html"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/documentbuilderfactory-disallow-doctype-decl-false.yaml", "description": "DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/documentbuilderfactory-disallow-doctype-decl-false.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor", "https://xerces.apache.org/xerces2-j/features.html"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/documentbuilderfactory-external-parameter-entities-true.yaml", "description": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/documentbuilderfactory-external-parameter-entities-true.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}], "javascript": [{"file_path": "../javascript/express/security/audit/express-libxml-noent.yaml", "description": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-libxml-noent.yaml", "metadata": {"interfile": true, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html"], "technology": ["express"], "category": "security", "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}]}, "A6: Security Misconfiguration": {"java": [{"file_path": "../java/lang/security/audit/xxe/documentbuilderfactory-external-general-entities-true.yaml", "description": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/documentbuilderfactory-external-general-entities-true.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/transformerfactory-dtds-not-disabled.yaml", "description": "DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\".", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/transformerfactory-dtds-not-disabled.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor", "https://xerces.apache.org/xerces2-j/features.html"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/documentbuilderfactory-disallow-doctype-decl-missing.yaml", "description": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/documentbuilderfactory-disallow-doctype-decl-missing.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor", "https://xerces.apache.org/xerces2-j/features.html"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/saxparserfactory-disallow-doctype-decl-missing.yaml", "description": "DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/saxparserfactory-disallow-doctype-decl-missing.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor", "https://xerces.apache.org/xerces2-j/features.html"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/documentbuilderfactory-disallow-doctype-decl-false.yaml", "description": "DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/documentbuilderfactory-disallow-doctype-decl-false.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor", "https://xerces.apache.org/xerces2-j/features.html"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../java/lang/security/audit/xxe/documentbuilderfactory-external-parameter-entities-true.yaml", "description": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xxe/documentbuilderfactory-external-parameter-entities-true.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://blog.sonarsource.com/secure-xml-processor"], "category": "security", "technology": ["java", "xml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "HIGH"}}], "yaml": [{"file_path": "../yaml/docker-compose/security/privileged-service.yaml", "description": "Service '$SERVICE' is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/docker-compose/security/privileged-service.yaml", "metadata": {"cwe": ["CWE-250: Execution with Unnecessary Privileges"], "owasp": ["A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html", "https://containerjournal.com/topics/container-security/why-running-a-privileged-container-is-not-a-good-idea/"], "category": "security", "technology": ["docker-compose"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}, {"file_path": "../yaml/docker-compose/security/privileged-service.yaml", "description": "Service '$SERVICE' is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/docker-compose/security/privileged-service.yaml", "metadata": {"cwe": ["CWE-250: Execution with Unnecessary Privileges"], "owasp": ["A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "references": ["https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html", "https://containerjournal.com/topics/container-security/why-running-a-privileged-container-is-not-a-good-idea/"], "category": "security", "technology": ["docker-compose"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}], "javascript": [{"file_path": "../javascript/express/security/audit/express-libxml-noent.yaml", "description": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-libxml-noent.yaml", "metadata": {"interfile": true, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html"], "technology": ["express"], "category": "security", "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}]}, "A5: Broken Access Control": {"java": [{"file_path": "../java/spring/security/injection/tainted-file-path.yaml", "description": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-file-path.yaml", "metadata": {"cwe": ["CWE-23: Relative Path Traversal"], "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/www-community/attacks/Path_Traversal"], "category": "security", "technology": ["java", "spring"], "subcategory": ["vuln"], "impact": "HIGH", "likelihood": "MEDIUM", "confidence": "HIGH", "interfile": true}}], "ruby": [{"file_path": "../ruby/rails/security/brakeman/check-unscoped-find.yaml", "description": "Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-unscoped-find.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unscoped_find.rb", "category": "security", "cwe": ["CWE-639: Authorization Bypass Through User-Controlled Key"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "technology": ["ruby", "rails"], "references": ["https://brakemanscanner.org/docs/warning_types/unscoped_find/", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/controllers/users_controller.rb"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-unscoped-find.yaml", "description": "Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-unscoped-find.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unscoped_find.rb", "category": "security", "cwe": ["CWE-639: Authorization Bypass Through User-Controlled Key"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "technology": ["ruby", "rails"], "references": ["https://brakemanscanner.org/docs/warning_types/unscoped_find/", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/controllers/users_controller.rb"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-render-local-file-include.yaml", "description": "Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-render-local-file-include.yaml", "metadata": {"technology": ["ruby", "rails"], "category": "security", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb", "references": ["https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion", "https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]"}}, {"file_path": "../ruby/rails/security/brakeman/check-render-local-file-include.yaml", "description": "Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-render-local-file-include.yaml", "metadata": {"technology": ["ruby", "rails"], "category": "security", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb", "references": ["https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion", "https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]"}}]}, "A08:2017 - Insecure Deserialization": {"csharp": [{"file_path": "../csharp/lang/security/insecure-deserialization/binary-formatter.yaml", "description": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/binary-formatter.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "category": "security", "technology": [".net"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}], "javascript": [{"file_path": "../javascript/express/security/audit/express-third-party-object-deserialization.yaml", "description": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from().", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-third-party-object-deserialization.yaml", "metadata": {"interfile": true, "technology": ["express"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"], "source_rule_url": ["https://github.com/ajinabraham/njsscan/blob/75bfbeb9c8d72999e4d527dfa2548f7f0f3cc48a/njsscan/rules/semantic_grep/eval/eval_deserialize.yaml"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}], "ruby": [{"file_path": "../ruby/aws-lambda/security/tainted-deserialization.yaml", "description": "Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/tainted-deserialization.yaml", "metadata": {"references": ["https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html", "https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "technology": ["ruby", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/bad-deserialization.yaml", "description": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/bad-deserialization.yaml", "metadata": {"references": ["https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["ruby"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/bad-deserialization-env.yaml", "description": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/bad-deserialization-env.yaml", "metadata": {"references": ["https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["ruby"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "LOW"}}]}, "A08:2021 - Software and Data Integrity Failures": {"csharp": [{"file_path": "../csharp/lang/security/insecure-deserialization/binary-formatter.yaml", "description": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/binary-formatter.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide"], "category": "security", "technology": [".net"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}], "javascript": [{"file_path": "../javascript/express/security/audit/express-third-party-object-deserialization.yaml", "description": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from().", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-third-party-object-deserialization.yaml", "metadata": {"interfile": true, "technology": ["express"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"], "source_rule_url": ["https://github.com/ajinabraham/njsscan/blob/75bfbeb9c8d72999e4d527dfa2548f7f0f3cc48a/njsscan/rules/semantic_grep/eval/eval_deserialize.yaml"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}], "ruby": [{"file_path": "../ruby/aws-lambda/security/tainted-deserialization.yaml", "description": "Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/tainted-deserialization.yaml", "metadata": {"references": ["https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html", "https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "technology": ["ruby", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/bad-deserialization.yaml", "description": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/bad-deserialization.yaml", "metadata": {"references": ["https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["ruby"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/bad-deserialization-env.yaml", "description": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/bad-deserialization-env.yaml", "metadata": {"references": ["https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["ruby"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "LOW"}}]}, "A07:2021 - Identification and Authentication Failures": {"javascript": [{"file_path": "../javascript/express/security/audit/express-session-hardcoded-secret.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-session-hardcoded-secret.yaml", "metadata": {"interfile": true, "cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "category": "security", "technology": ["express", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "HIGH"}}]}, "A7: Cross-Site Scripting (XSS)": {"ruby": [{"file_path": "../ruby/rails/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html", "https://github.com/arkadiyt/ssrf_filter"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}]}}