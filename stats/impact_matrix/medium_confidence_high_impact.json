{"A3: Sensitive Data Exposure": {"terraform": [{"file_path": "../terraform/aws/security/aws-lambda-environment-credentials.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-lambda-environment-credentials.yaml", "metadata": {"category": "security", "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "technology": ["aws", "terraform", "secrets"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-lambda-environment-credentials.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-lambda-environment-credentials.yaml", "metadata": {"category": "security", "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "technology": ["aws", "terraform", "secrets"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-kinesis-stream-unencrypted.yaml", "description": "The AWS Kinesis stream does not encrypt data at rest. The data could be read if the Kinesis stream storage layer is compromised. Enable Kinesis stream server-side encryption.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-kinesis-stream-unencrypted.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_stream#encryption_type", "https://docs.aws.amazon.com/streams/latest/dev/server-side-encryption.html"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM", "rule-origin-note": "published from /src/aws-kinesis-stream-unencrypted.yml in None"}}, {"file_path": "../terraform/aws/security/aws-ebs-volume-unencrypted.yaml", "description": "The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-ebs-volume-unencrypted.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted", "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}], "typescript": [{"file_path": "../typescript/aws-cdk/security/audit/awscdk-bucket-encryption.yml", "description": "Add \"encryption: $Y.BucketEncryption.KMS_MANAGED\" or \"encryption: $Y.BucketEncryption.S3_MANAGED\" to the bucket props for Bucket construct $X", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/aws-cdk/security/audit/awscdk-bucket-encryption.yml", "metadata": {"cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "category": "security", "technology": ["AWS-CDK"], "references": ["https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../typescript/aws-cdk/security/audit/awscdk-sqs-unencryptedqueue.yml", "description": "Queue $X is missing encryption at rest. Add \"encryption: $Y.QueueEncryption.KMS\" or \"encryption: $Y.QueueEncryption.KMS_MANAGED\" to the queue props to enable encryption at rest for the queue.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/aws-cdk/security/audit/awscdk-sqs-unencryptedqueue.yml", "metadata": {"category": "security", "cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "technology": ["AWS-CDK"], "references": ["https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-data-protection.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/jsonwebtoken/security/jwt-none-alg.yaml", "description": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/jsonwebtoken/security/jwt-none-alg.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.3 Insecue Stateless Session Tokens", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["jwt"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"]}}, {"file_path": "../javascript/jsonwebtoken/security/jwt-none-alg.yaml", "description": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/jsonwebtoken/security/jwt-none-alg.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.3 Insecue Stateless Session Tokens", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["jwt"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"]}}], "ruby": [{"file_path": "../ruby/lang/security/weak-hashes-md5.yaml", "description": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/weak-hashes-md5.yaml", "metadata": {"cwe": ["CWE-328: Use of Weak Hash"], "references": ["https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575"], "category": "security", "technology": ["ruby"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/weak-hashes-md5.yaml", "description": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/weak-hashes-md5.yaml", "metadata": {"cwe": ["CWE-328: Use of Weak Hash"], "references": ["https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575"], "category": "security", "technology": ["ruby"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}]}, "A07:2021 - Identification and Authentication Failures": {"terraform": [{"file_path": "../terraform/aws/security/aws-ec2-launch-template-metadata-service-v1-enabled.yaml", "description": "The EC2 launch template has Instance Metadata Service Version 1 (IMDSv1) enabled. IMDSv2 introduced session authentication tokens which improve security when talking to IMDS. You should either disable IMDS or require the use of IMDSv2.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-ec2-launch-template-metadata-service-v1-enabled.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-1390: Weak Authentication"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_configuration#metadata_options", "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}], "typescript": [{"file_path": "../typescript/aws-cdk/security/awscdk-bucket-grantpublicaccessmethod.yml", "description": "Using the GrantPublicAccess method on bucket contruct $X will make the objects in the bucket world accessible. Verify if this is intentional.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/aws-cdk/security/awscdk-bucket-grantpublicaccessmethod.yml", "metadata": {"cwe": ["CWE-306: Missing Authentication for Critical Function"], "category": "security", "technology": ["AWS-CDK"], "references": ["https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-overview.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "MEDIUM"}}]}, "A04:2021 - Insecure Design": {"terraform": [{"file_path": "../terraform/aws/security/aws-kinesis-stream-unencrypted.yaml", "description": "The AWS Kinesis stream does not encrypt data at rest. The data could be read if the Kinesis stream storage layer is compromised. Enable Kinesis stream server-side encryption.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-kinesis-stream-unencrypted.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_stream#encryption_type", "https://docs.aws.amazon.com/streams/latest/dev/server-side-encryption.html"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM", "rule-origin-note": "published from /src/aws-kinesis-stream-unencrypted.yml in None"}}, {"file_path": "../terraform/aws/security/aws-ebs-volume-unencrypted.yaml", "description": "The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-ebs-volume-unencrypted.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted", "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}], "typescript": [{"file_path": "../typescript/aws-cdk/security/audit/awscdk-bucket-encryption.yml", "description": "Add \"encryption: $Y.BucketEncryption.KMS_MANAGED\" or \"encryption: $Y.BucketEncryption.S3_MANAGED\" to the bucket props for Bucket construct $X", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/aws-cdk/security/audit/awscdk-bucket-encryption.yml", "metadata": {"cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "category": "security", "technology": ["AWS-CDK"], "references": ["https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../typescript/aws-cdk/security/audit/awscdk-sqs-unencryptedqueue.yml", "description": "Queue $X is missing encryption at rest. Add \"encryption: $Y.QueueEncryption.KMS\" or \"encryption: $Y.QueueEncryption.KMS_MANAGED\" to the queue props to enable encryption at rest for the queue.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/aws-cdk/security/audit/awscdk-sqs-unencryptedqueue.yml", "metadata": {"category": "security", "cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "technology": ["AWS-CDK"], "references": ["https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-data-protection.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}]}, "A08:2021 - Software and Data Integrity Failures": {"terraform": [{"file_path": "../terraform/aws/security/aws-ecr-mutable-image-tags.yaml", "description": "The ECR repository allows tag mutability. Image tags could be overwritten with compromised images. ECR images should be set to IMMUTABLE to prevent code injection through image mutation. This can be done by setting `image_tag_mutability` to IMMUTABLE.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-ecr-mutable-image-tags.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-345: Insufficient Verification of Data Authenticity"], "references": ["https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#image_tag_mutability", "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/java-jwt/security/audit/jwt-decode-without-verify.yaml", "description": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/java-jwt/security/audit/jwt-decode-without-verify.yaml", "metadata": {"cwe": ["CWE-345: Insufficient Verification of Data Authenticity"], "owasp": ["A08:2021 - Software and Data Integrity Failures"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "category": "security", "technology": ["jwt"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}], "csharp": [{"file_path": "../csharp/lang/security/insecure-deserialization/los-formatter.yaml", "description": "The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/los-formatter.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../csharp/lang/security/insecure-deserialization/fs-pickler.yaml", "description": "The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/fs-pickler.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://mbraceproject.github.io/FsPickler/tutorial.html#Disabling-Subtype-Resolution"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../csharp/lang/security/insecure-deserialization/net-data-contract.yaml", "description": "The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/net-data-contract.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8#security"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../csharp/lang/security/insecure-deserialization/soap-formatter.yaml", "description": "The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/soap-formatter.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8#remarks"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}], "ruby": [{"file_path": "../ruby/jwt/security/jwt-decode-no-verify.yaml", "description": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Ensure verify=true in the JWT decode call", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/jwt/security/jwt-decode-no-verify.yaml", "metadata": {"cwe": ["CWE-345: Insufficient Verification of Data Authenticity"], "owasp": ["A08:2021 - Software and Data Integrity Failures"], "source-rule-url": "https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "category": "security", "technology": ["jwt"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]"}}, {"file_path": "../ruby/aws-lambda/security/tainted-deserialization.yaml", "description": "Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/tainted-deserialization.yaml", "metadata": {"references": ["https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html", "https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "technology": ["ruby", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/bad-deserialization.yaml", "description": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/bad-deserialization.yaml", "metadata": {"references": ["https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["ruby"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/bad-deserialization-env.yaml", "description": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/bad-deserialization-env.yaml", "metadata": {"references": ["https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["ruby"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "LOW"}}]}, "Not OWASP Related": {"go": [{"file_path": "../go/template/security/ssti.yaml", "description": "A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. When using \"html/template\" always check that user inputs are validated and sanitized before included within the template.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/template/security/ssti.yaml", "metadata": {"category": "security", "cwe": ["CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine"], "references": ["https://www.onsecurity.io/blog/go-ssti-method-research/", "http://blog.takemyhand.xyz/2020/05/ssti-breaking-gos-template-engine-to.html"], "technology": ["go"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}], "yaml": [{"file_path": "../yaml/kubernetes/security/exposing-docker-socket-hostpath.yaml", "description": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/exposing-docker-socket-hostpath.yaml", "metadata": {"cwe": ["CWE-250: Execution with Unnecessary Privileges"], "references": ["https://kubernetes.io/docs/concepts/storage/volumes/#hostpath", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers"], "category": "security", "technology": ["kubernetes"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/intercom/security/audit/intercom-settings-user-identifier-without-user-hash.yaml", "description": "Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`.This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/intercom/security/audit/intercom-settings-user-identifier-without-user-hash.yaml", "metadata": {"category": "security", "subcategory": ["guardrail"], "cwe": ["CWE-287: Improper Authentication"], "confidence": "MEDIUM", "likelihood": "MEDIUM", "impact": "HIGH", "technology": ["intercom"], "references": ["https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile"]}}], "c": [{"file_path": "../c/lang/security/insecure-use-printf-fn.yaml", "description": "Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/c/lang/security/insecure-use-printf-fn.yaml", "metadata": {"cwe": ["CWE-134: Use of Externally-Controlled Format String"], "references": ["https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions", "https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html"], "category": "security", "technology": ["c"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../c/lang/security/function-use-after-free.yaml", "description": "Variable '$VAR' was passed to a function after being freed. This can lead to undefined behavior.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/c/lang/security/function-use-after-free.yaml", "metadata": {"cwe": ["CWE-416: Use After Free"], "references": ["https://cwe.mitre.org/data/definitions/416.html", "https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/"], "category": "security", "technology": ["c"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../c/lang/security/random-fd-exhaustion.yaml", "description": "Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/c/lang/security/random-fd-exhaustion.yaml", "metadata": {"cwe": ["CWE-774: Allocation of File Descriptors or Handles Without Limits or Throttling"], "references": ["https://lwn.net/Articles/606141/"], "category": "security", "technology": ["c"], "confidence": "MEDIUM", "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../c/lang/security/insecure-use-gets-fn.yaml", "description": "Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/c/lang/security/insecure-use-gets-fn.yaml", "metadata": {"cwe": ["CWE-676: Use of Potentially Dangerous Function"], "references": ["https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s"], "category": "security", "technology": ["c"], "confidence": "MEDIUM", "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../c/lang/security/use-after-free.yaml", "description": "Variable '$VAR' was used after being freed. This can lead to undefined behavior.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/c/lang/security/use-after-free.yaml", "metadata": {"cwe": ["CWE-416: Use After Free"], "references": ["https://cwe.mitre.org/data/definitions/416.html", "https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/"], "category": "security", "technology": ["c"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}]}, "A1: Injection": {"go": [{"file_path": "../go/lang/security/audit/dangerous-exec-cmd.yaml", "description": "Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/dangerous-exec-cmd.yaml", "metadata": {"cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH"}}], "python": [{"file_path": "../python/flask/security/injection/user-exec.yaml", "description": "Detected user data flowing into exec. This is code injection and should be avoided.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/user-exec.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html"], "category": "security", "technology": ["flask"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/os-system-injection.yaml", "description": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/os-system-injection.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/Command_Injection"], "category": "security", "technology": ["flask"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/os-system-injection.yaml", "description": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/os-system-injection.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/Command_Injection"], "category": "security", "technology": ["flask"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/pyramid/security/sqlalchemy-sql-injection.yaml", "description": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pyramid/security/sqlalchemy-sql-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data"], "technology": ["pyramid"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/pyramid/security/sqlalchemy-sql-injection.yaml", "description": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pyramid/security/sqlalchemy-sql-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data"], "technology": ["pyramid"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/sqlalchemy/security/sqlalchemy-sql-injection.yaml", "description": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/sqlalchemy/security/sqlalchemy-sql-injection.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "category": "security", "technology": ["sqlalchemy"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/sqlalchemy/security/sqlalchemy-sql-injection.yaml", "description": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/sqlalchemy/security/sqlalchemy-sql-injection.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "category": "security", "technology": ["sqlalchemy"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-subinterpreters-run-string.yaml", "description": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-subinterpreters-run-string.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://bugs.python.org/issue43472", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-system-call.yaml", "description": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-system-call.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-system-call.yaml", "description": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-system-call.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-subprocess-use.yaml", "description": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-subprocess-use.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-subprocess-use.yaml", "description": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-subprocess-use.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-testcapi-run-in-subinterp.yaml", "description": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-testcapi-run-in-subinterp.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}, {"file_path": "../python/lang/security/dangerous-code-run.yaml", "description": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-code-run.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-asyncio-shell-tainted-env-args.yaml", "description": "Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-asyncio-shell-tainted-env-args.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-asyncio-shell-tainted-env-args.yaml", "description": "Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-asyncio-shell-tainted-env-args.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-subinterpreters-run-string-tainted-env-args.yaml", "description": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-subinterpreters-run-string-tainted-env-args.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://bugs.python.org/issue43472", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-os-exec-tainted-env-args.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-os-exec-tainted-env-args.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "confidence": "MEDIUM", "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-os-exec-tainted-env-args.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-os-exec-tainted-env-args.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "confidence": "MEDIUM", "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-code-run-tainted-env-args.yaml", "description": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-code-run-tainted-env-args.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-testcapi-run-in-subinterp-tainted-env-args.yaml", "description": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-testcapi-run-in-subinterp-tainted-env-args.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-asyncio-exec-tainted-env-args.yaml", "description": "Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-asyncio-exec-tainted-env-args.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-asyncio-exec-tainted-env-args.yaml", "description": "Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-asyncio-exec-tainted-env-args.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-spawn-process-tainted-env-args.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-spawn-process-tainted-env-args.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-spawn-process-tainted-env-args.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-spawn-process-tainted-env-args.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-system-call-tainted-env-args.yaml", "description": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-system-call-tainted-env-args.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/lang/security/audit/dangerous-system-call-tainted-env-args.yaml", "description": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-system-call-tainted-env-args.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/django/security/injection/code/user-eval.yaml", "description": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/code/user-eval.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html", "https://owasp.org/www-community/attacks/Code_Injection"], "category": "security", "technology": ["django"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/code/user-exec-format-string.yaml", "description": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/code/user-exec-format-string.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "category": "security", "technology": ["django"], "references": ["https://owasp.org/www-community/attacks/Code_Injection"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/code/user-exec.yaml", "description": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/code/user-exec.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "category": "security", "technology": ["django"], "references": ["https://owasp.org/www-community/attacks/Code_Injection"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/code/user-eval-format-string.yaml", "description": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/code/user-eval-format-string.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html"], "category": "security", "technology": ["django"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/command/command-injection-os-system.yaml", "description": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/command/command-injection-os-system.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/Command_Injection"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/command/command-injection-os-system.yaml", "description": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/command/command-injection-os-system.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/Command_Injection"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/command/subprocess-injection.yaml", "description": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/command/subprocess-injection.yaml", "metadata": {"category": "security", "technology": ["flask"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/django/security/injection/command/subprocess-injection.yaml", "description": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/command/subprocess-injection.yaml", "metadata": {"category": "security", "technology": ["flask"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../python/django/security/injection/sql/sql-injection-extra.yaml", "description": "User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/sql/sql-injection-extra.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/sql/sql-injection-extra.yaml", "description": "User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/sql/sql-injection-extra.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/sql/sql-injection-rawsql.yaml", "description": "User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/sql/sql-injection-rawsql.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/sql/sql-injection-rawsql.yaml", "description": "User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/sql/sql-injection-rawsql.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/sql/sql-injection-using-db-cursor-execute.yaml", "description": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/sql/sql-injection-using-db-cursor-execute.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/sql/sql-injection-using-db-cursor-execute.yaml", "description": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/sql/sql-injection-using-db-cursor-execute.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/sql/sql-injection-using-raw.yaml", "description": "Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/sql/sql-injection-using-raw.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/sql/sql-injection-using-raw.yaml", "description": "Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/sql/sql-injection-using-raw.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/jboss/security/session_sqli.yaml", "description": "In $METHOD, $X is used to construct a SQL query via string concatenation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/jboss/security/session_sqli.yaml", "metadata": {"category": "security", "technology": ["jboss"], "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../java/jboss/security/session_sqli.yaml", "description": "In $METHOD, $X is used to construct a SQL query via string concatenation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/jboss/security/session_sqli.yaml", "metadata": {"category": "security", "technology": ["jboss"], "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../java/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/aws-lambda/security/tainted-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/aws-lambda/security/tainted-sqli.yaml", "metadata": {"category": "security", "technology": ["sql", "java", "aws-lambda"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/aws-lambda/security/tainted-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/aws-lambda/security/tainted-sqli.yaml", "metadata": {"category": "security", "technology": ["sql", "java", "aws-lambda"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/spring/security/injection/tainted-system-command.yaml", "description": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-system-command.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["java", "spring"], "confidence": "HIGH", "references": ["https://www.stackhawk.com/blog/command-injection-java/", "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html", "https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}, {"file_path": "../java/spring/security/injection/tainted-system-command.yaml", "description": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-system-command.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["java", "spring"], "confidence": "HIGH", "references": ["https://www.stackhawk.com/blog/command-injection-java/", "https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html", "https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH"}}], "scala": [{"file_path": "../scala/lang/security/audit/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["scala"], "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}, {"file_path": "../scala/lang/security/audit/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["scala"], "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH"}}], "yaml": [{"file_path": "../yaml/argo/security/argo-workflow-parameter-command-injection.yaml", "description": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/argo/security/argo-workflow-parameter-command-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 \u2013 Injection"], "confidence": "MEDIUM", "likelihood": "MEDIUM", "impact": "HIGH", "subcategory": ["vuln"], "references": ["https://github.com/argoproj/argo-workflows/issues/5061", "https://github.com/argoproj/argo-workflows/issues/5114#issue-808865370"], "technology": ["ci", "argo"]}}], "csharp": [{"file_path": "../csharp/lang/security/sqli/csharp-sqli.yaml", "description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/sqli/csharp-sqli.yaml", "metadata": {"category": "security", "technology": ["csharp"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../csharp/lang/security/sqli/csharp-sqli.yaml", "description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/sqli/csharp-sqli.yaml", "metadata": {"category": "security", "technology": ["csharp"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH"}}], "javascript": [{"file_path": "../javascript/deno/security/audit/deno-dangerous-run.yaml", "description": "Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/deno/security/audit/deno-dangerous-run.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["deno"], "references": ["https://deno.land/manual/examples/subprocess#simple-example"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/deno/security/audit/deno-dangerous-run.yaml", "description": "Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/deno/security/audit/deno-dangerous-run.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["deno"], "references": ["https://deno.land/manual/examples/subprocess#simple-example"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/tainted-eval.yaml", "description": "The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-eval.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "category": "security", "technology": ["javascript", "aws-lambda"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "LOW", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/mysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/mysql-sqli.yaml", "metadata": {"references": ["https://www.npmjs.com/package/mysql2"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql", "mysql2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/mysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/mysql-sqli.yaml", "metadata": {"references": ["https://www.npmjs.com/package/mysql2"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql", "mysql2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/sequelize-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/sequelize-sqli.yaml", "metadata": {"references": ["https://sequelize.org/master/manual/raw-queries.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sequelize"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/sequelize-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/sequelize-sqli.yaml", "metadata": {"references": ["https://sequelize.org/master/manual/raw-queries.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sequelize"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/pg-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/pg-sqli.yaml", "metadata": {"references": ["https://node-postgres.com/features/queries"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "postgres", "pg"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/pg-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/pg-sqli.yaml", "metadata": {"references": ["https://node-postgres.com/features/queries"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "postgres", "pg"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/knex-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/knex-sqli.yaml", "metadata": {"references": ["https://knexjs.org/#Builder-fromRaw", "https://knexjs.org/#Builder-whereRaw"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "knex"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/knex-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/knex-sqli.yaml", "metadata": {"references": ["https://knexjs.org/#Builder-fromRaw", "https://knexjs.org/#Builder-whereRaw"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "knex"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/dynamodb-request-object.yaml", "description": "Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/dynamodb-request-object.yaml", "metadata": {"cwe": ["CWE-943: Improper Neutralization of Special Elements in Data Query Logic"], "owasp": ["A01:2017 - Injection"], "category": "security", "technology": ["javascript", "aws-lambda", "dynamodb"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/detect-child-process.yaml", "description": "Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/detect-child-process.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["javascript", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/detect-child-process.yaml", "description": "Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/detect-child-process.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "category": "security", "technology": ["javascript", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/lang/security/detect-child-process.yaml", "description": "Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/detect-child-process.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"], "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js", "category": "security", "technology": ["javascript"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH", "confidence": "LOW"}}, {"file_path": "../javascript/lang/security/detect-child-process.yaml", "description": "Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/detect-child-process.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"], "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js", "category": "security", "technology": ["javascript"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH", "confidence": "LOW"}}], "c": [{"file_path": "../c/lang/security/double-free.yaml", "description": "Variable '$VAR' was freed twice. This can lead to undefined behavior.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/c/lang/security/double-free.yaml", "metadata": {"cwe": ["CWE-415: Double Free"], "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://cwe.mitre.org/data/definitions/415.html", "https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory"], "category": "security", "technology": ["c"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../c/lang/security/double-free.yaml", "description": "Variable '$VAR' was freed twice. This can lead to undefined behavior.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/c/lang/security/double-free.yaml", "metadata": {"cwe": ["CWE-415: Double Free"], "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://cwe.mitre.org/data/definitions/415.html", "https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory"], "category": "security", "technology": ["c"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}], "ruby": [{"file_path": "../ruby/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/mysql2-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/mysql2-sqli.yaml", "metadata": {"references": ["https://github.com/brianmario/mysql2"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/mysql2-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/mysql2-sqli.yaml", "metadata": {"references": ["https://github.com/brianmario/mysql2"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/activerecord-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created > ?\", author_id, start_date]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/activerecord-sqli.yaml", "metadata": {"references": ["https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "active-record"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/activerecord-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created > ?\", author_id, start_date]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/activerecord-sqli.yaml", "metadata": {"references": ["https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "active-record"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/pg-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/pg-sqli.yaml", "metadata": {"references": ["https://www.rubydoc.info/gems/pg/PG/Connection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "postgres", "pg"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/pg-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/pg-sqli.yaml", "metadata": {"references": ["https://www.rubydoc.info/gems/pg/PG/Connection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "postgres", "pg"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/sequel-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/sequel-sqli.yaml", "metadata": {"references": ["https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sequel"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/aws-lambda/security/sequel-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/sequel-sqli.yaml", "metadata": {"references": ["https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sequel"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/dangerous-exec.yaml", "description": "Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/dangerous-exec.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_execute.rb", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "category": "security", "technology": ["ruby", "rails"], "references": ["https://guides.rubyonrails.org/security.html#command-line-injection"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html", "https://github.com/arkadiyt/ssrf_filter"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}]}, "A5: Broken Access Control": {"python": [{"file_path": "../python/flask/security/injection/path-traversal-open.yaml", "description": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/path-traversal-open.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://owasp.org/www-community/attacks/Path_Traversal"], "category": "security", "technology": ["flask"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/path-traversal-open.yaml", "description": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/path-traversal-open.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://owasp.org/www-community/attacks/Path_Traversal"], "category": "security", "technology": ["flask"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/spring/security/audit/spring-actuator-fully-enabled-yaml.yaml", "description": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/audit/spring-actuator-fully-enabled-yaml.yaml", "metadata": {"cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints", "https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785", "https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators"], "category": "security", "technology": ["spring"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../java/spring/security/audit/spring-actuator-non-health-enabled-yaml.yaml", "description": "Spring Boot Actuator \"$ACTUATOR\" is enabled. Depending on the actuator, this can pose a significant security risk. Please double-check if the actuator is needed and properly secured.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/audit/spring-actuator-non-health-enabled-yaml.yaml", "metadata": {"cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints", "https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785", "https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators"], "category": "security", "technology": ["spring"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../java/spring/security/audit/spring-actuator-non-health-enabled.yaml", "description": "Spring Boot Actuators \"$...ACTUATORS\" are enabled. Depending on the actuators, this can pose a significant security risk. Please double-check if the actuators are needed and properly secured.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/audit/spring-actuator-non-health-enabled.yaml", "metadata": {"cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints", "https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785", "https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators"], "category": "security", "technology": ["spring"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../java/spring/security/audit/spring-actuator-fully-enabled.yaml", "description": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/audit/spring-actuator-fully-enabled.yaml", "metadata": {"cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints", "https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785", "https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators"], "category": "security", "technology": ["spring"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../java/spring/security/injection/tainted-file-path.yaml", "description": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-file-path.yaml", "metadata": {"cwe": ["CWE-23: Relative Path Traversal"], "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/www-community/attacks/Path_Traversal"], "category": "security", "technology": ["java", "spring"], "subcategory": ["vuln"], "impact": "HIGH", "likelihood": "MEDIUM", "confidence": "HIGH", "interfile": true}}], "json": [{"file_path": "../json/aws/security/public-s3-policy-statement.yaml", "description": "Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/json/aws/security/public-s3-policy-statement.yaml", "metadata": {"owasp": ["A01:2021 - Broken Access Control"], "cwe": ["CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls"], "references": ["https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html"], "category": "security", "technology": ["aws"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../json/aws/security/public-s3-bucket.yaml", "description": "Detected public S3 bucket. This policy allows anyone to have some kind of access to the bucket. The exact level of access and types of actions allowed will depend on the configuration of bucket policy and ACLs. Please review the bucket configuration to make sure they are set with intended values.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/json/aws/security/public-s3-bucket.yaml", "metadata": {"category": "security", "cwe": ["CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html"], "technology": ["aws"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/rails/security/brakeman/check-unscoped-find.yaml", "description": "Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-unscoped-find.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unscoped_find.rb", "category": "security", "cwe": ["CWE-639: Authorization Bypass Through User-Controlled Key"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "technology": ["ruby", "rails"], "references": ["https://brakemanscanner.org/docs/warning_types/unscoped_find/", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/controllers/users_controller.rb"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-unscoped-find.yaml", "description": "Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-unscoped-find.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unscoped_find.rb", "category": "security", "cwe": ["CWE-639: Authorization Bypass Through User-Controlled Key"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "technology": ["ruby", "rails"], "references": ["https://brakemanscanner.org/docs/warning_types/unscoped_find/", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/controllers/users_controller.rb"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-render-local-file-include.yaml", "description": "Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-render-local-file-include.yaml", "metadata": {"technology": ["ruby", "rails"], "category": "security", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb", "references": ["https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion", "https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]"}}, {"file_path": "../ruby/rails/security/brakeman/check-render-local-file-include.yaml", "description": "Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-render-local-file-include.yaml", "metadata": {"technology": ["ruby", "rails"], "category": "security", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb", "references": ["https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion", "https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]"}}]}, "A10:2021 - Server-Side Request Forgery (SSRF)": {"python": [{"file_path": "../python/flask/security/injection/ssrf-requests.yaml", "description": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/ssrf-requests.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"], "category": "security", "technology": ["flask"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/ssrf/ssrf-injection-requests.yaml", "description": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/ssrf/ssrf-injection-requests.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/ssrf/ssrf-injection-urllib.yaml", "description": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/ssrf/ssrf-injection-urllib.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}], "scala": [{"file_path": "../scala/lang/security/audit/io-source-ssrf.yaml", "description": "A parameter being passed directly into `fromURL` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/lang/security/audit/io-source-ssrf.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html", "https://www.scala-lang.org/api/current/scala/io/Source$.html#fromURL(url:java.net.URL)(implicitcodec:scala.io.Codec):scala.io.BufferedSource"], "category": "security", "technology": ["scala"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "HIGH"}}], "javascript": [{"file_path": "../javascript/express/security/audit/express-ssrf.yaml", "description": "The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-ssrf.yaml", "metadata": {"references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "technology": ["express"], "category": "security", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}]}, "A6:2017 misconfiguration": {"python": [{"file_path": "../python/cryptography/security/empty-aes-key.yaml", "description": "Potential empty AES encryption key. Using an empty key in AES encryption can result in weak encryption and may allow attackers to easily decrypt sensitive data. Ensure that a strong, non-empty key is used for AES encryption.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/empty-aes-key.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "CWE-310: Cryptographic Issues"], "references": ["https://cwe.mitre.org/data/definitions/327.html", "https://cwe.mitre.org/data/definitions/310.html"], "category": "security", "technology": ["python"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A6:2017 misconfiguration"}}]}, "A04:2017 - XML External Entities (XXE)": {"java": [{"file_path": "../java/lang/security/xmlinputfactory-possible-xxe.yaml", "description": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/xmlinputfactory-possible-xxe.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf", "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/audit/express-xml2json-xxe-event.yaml", "description": "Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-xml2json-xxe-event.yaml", "metadata": {"owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/xml2json"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}]}, "A6: Security Misconfiguration": {"java": [{"file_path": "../java/lang/security/xmlinputfactory-possible-xxe.yaml", "description": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/xmlinputfactory-possible-xxe.yaml", "metadata": {"cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://semgrep.dev/blog/2022/xml-security-in-java", "https://semgrep.dev/docs/cheat-sheets/java-xxe/", "https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf", "https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "MEDIUM"}}], "json": [{"file_path": "../json/aws/security/wildcard-assume-role.yaml", "description": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/json/aws/security/wildcard-assume-role.yaml", "metadata": {"cwe": ["CWE-250: Execution with Unnecessary Privileges"], "category": "security", "technology": ["aws"], "references": ["https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/"], "owasp": ["A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../json/aws/security/wildcard-assume-role.yaml", "description": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/json/aws/security/wildcard-assume-role.yaml", "metadata": {"cwe": ["CWE-250: Execution with Unnecessary Privileges"], "category": "security", "technology": ["aws"], "references": ["https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/"], "owasp": ["A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "HIGH", "confidence": "MEDIUM"}}], "yaml": [{"file_path": "../yaml/kubernetes/security/run-as-non-root-unsafe-value.yaml", "description": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/run-as-non-root-unsafe-value.yaml", "metadata": {"references": ["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"], "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "category": "security", "technology": ["kubernetes"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/run-as-non-root-unsafe-value.yaml", "description": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/run-as-non-root-unsafe-value.yaml", "metadata": {"references": ["https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/", "https://kubernetes.io/docs/concepts/policy/pod-security-policy/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"], "cwe": ["CWE-250: Execution with Unnecessary Privileges"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "category": "security", "technology": ["kubernetes"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/audit/express-xml2json-xxe-event.yaml", "description": "Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-xml2json-xxe-event.yaml", "metadata": {"owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/xml2json"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}]}, "A8:2017 Insecure Deserialization": {"java": [{"file_path": "../java/lang/security/jackson-unsafe-deserialization.yaml", "description": "When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/jackson-unsafe-deserialization.yaml", "metadata": {"category": "security", "subcategory": ["audit"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "confidence": "MEDIUM", "likelihood": "LOW", "impact": "HIGH", "owasp": ["A8:2017 Insecure Deserialization", "A8:2021 Software and Data Integrity Failures"], "references": ["https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038", "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062", "https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/"], "technology": ["jackson"]}}]}, "A8:2021 Software and Data Integrity Failures": {"java": [{"file_path": "../java/lang/security/jackson-unsafe-deserialization.yaml", "description": "When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/jackson-unsafe-deserialization.yaml", "metadata": {"category": "security", "subcategory": ["audit"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "confidence": "MEDIUM", "likelihood": "LOW", "impact": "HIGH", "owasp": ["A8:2017 Insecure Deserialization", "A8:2021 Software and Data Integrity Failures"], "references": ["https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038", "https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062", "https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/"], "technology": ["jackson"]}}]}, "A3:2017 Sensitive Data Exposure": {"generic": [{"file_path": "../generic/secrets/security/google-maps-apikeyleak.yaml", "description": "Detects potential Google Maps API keys in code", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/secrets/security/google-maps-apikeyleak.yaml", "metadata": {"description": "Detects potential Google Maps API keys in code", "severity": "MEDIUM", "category": "security", "confidence": "MEDIUM", "impact": "HIGH", "likelihood": "MEDIUM", "subcategory": ["audit"], "owasp": ["A3:2017 Sensitive Data Exposure"], "references": ["https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e"], "cwe": ["CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory"], "technology": ["Google Maps"]}}]}, "A08:2017 - Insecure Deserialization": {"csharp": [{"file_path": "../csharp/lang/security/insecure-deserialization/los-formatter.yaml", "description": "The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/los-formatter.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../csharp/lang/security/insecure-deserialization/fs-pickler.yaml", "description": "The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/fs-pickler.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://mbraceproject.github.io/FsPickler/tutorial.html#Disabling-Subtype-Resolution"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../csharp/lang/security/insecure-deserialization/net-data-contract.yaml", "description": "The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/net-data-contract.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8#security"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}, {"file_path": "../csharp/lang/security/insecure-deserialization/soap-formatter.yaml", "description": "The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/insecure-deserialization/soap-formatter.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8#remarks"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH"}}], "ruby": [{"file_path": "../ruby/aws-lambda/security/tainted-deserialization.yaml", "description": "Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/aws-lambda/security/tainted-deserialization.yaml", "metadata": {"references": ["https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html", "https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "technology": ["ruby", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/bad-deserialization.yaml", "description": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/bad-deserialization.yaml", "metadata": {"references": ["https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["ruby"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/bad-deserialization-env.yaml", "description": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/bad-deserialization-env.yaml", "metadata": {"references": ["https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ", "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb"], "category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["ruby"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "HIGH", "confidence": "LOW"}}]}, "A7: Cross-Site Scripting (XSS)": {"ruby": [{"file_path": "../ruby/rails/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html", "https://github.com/arkadiyt/ssrf_filter"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "HIGH", "confidence": "MEDIUM"}}]}}