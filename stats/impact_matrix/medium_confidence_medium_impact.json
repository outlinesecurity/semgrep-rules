{"A3: Sensitive Data Exposure": {"terraform": [{"file_path": "../terraform/azure/security/azure-mysql-encryption-enabled.yaml", "description": "Ensure that MySQL server enables infrastructure encryption", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/azure-mysql-encryption-enabled.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure"], "cwe": ["CWE-320: CWE CATEGORY: Key Management Errors"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/azure-mysql-mintls-version.yaml", "description": "Ensure MySQL is using the latest version of TLS encryption", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/azure-mysql-mintls-version.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/azure-mysql-mintls-version.yaml", "description": "Ensure MySQL is using the latest version of TLS encryption", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/azure-mysql-mintls-version.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/azure-mssql-service-mintls-version.yaml", "description": "Ensure MSSQL is using the latest version of TLS encryption", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/azure-mssql-service-mintls-version.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/azure-mssql-service-mintls-version.yaml", "description": "Ensure MSSQL is using the latest version of TLS encryption", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/azure-mssql-service-mintls-version.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/appservice/azure-appservice-https-only.yaml", "description": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service Slot", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/azure-appservice-https-only.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/appservice/azure-appservice-https-only.yaml", "description": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service Slot", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/azure-appservice-https-only.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/appservice/appservice-require-client-cert.yaml", "description": "Detected an AppService that was not configured to use a client certificate. Add `client_cert_enabled = true` in your resource block.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/appservice-require-client-cert.yaml", "metadata": {"cwe": ["CWE-295: Improper Certificate Validation"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#client_cert_enabled"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/appservice/appservice-enable-https-only.yaml", "description": "By default, clients can connect to App Service by using both HTTP or HTTPS. HTTP should be disabled enabling the HTTPS Only setting.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/appservice-enable-https-only.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#https_only", "https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/appservice/appservice-enable-https-only.yaml", "description": "By default, clients can connect to App Service by using both HTTP or HTTPS. HTTP should be disabled enabling the HTTPS Only setting.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/appservice-enable-https-only.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#https_only", "https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/appservice/azure-appservice-min-tls-version.yaml", "description": "Ensure web app is using the latest version of TLS encryption", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/azure-appservice-min-tls-version.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/appservice/azure-appservice-min-tls-version.yaml", "description": "Ensure web app is using the latest version of TLS encryption", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/azure-appservice-min-tls-version.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/storage/storage-use-secure-tls-policy.yaml", "description": "Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/storage/storage-use-secure-tls-policy.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version", "https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/storage/storage-use-secure-tls-policy.yaml", "description": "Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/storage/storage-use-secure-tls-policy.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version", "https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/storage/storage-enforce-https.yaml", "description": "Detected a Storage that was not configured to deny action by default. Add `enable_https_traffic_only = true` in your resource block.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/storage/storage-enforce-https.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#enable_https_traffic_only", "https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/storage/storage-enforce-https.yaml", "description": "Detected a Storage that was not configured to deny action by default. Add `enable_https_traffic_only = true` in your resource block.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/storage/storage-enforce-https.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#enable_https_traffic_only", "https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/gcp/security/gcp-dns-key-specs-rsasha1.yaml", "description": "Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/gcp/security/gcp-dns-key-specs-rsasha1.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "gcp"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/gcp/security/gcp-dns-key-specs-rsasha1.yaml", "description": "Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/gcp/security/gcp-dns-key-specs-rsasha1.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "gcp"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/gcp/security/gcp-sql-database-require-ssl.yaml", "description": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/gcp/security/gcp-sql-database-require-ssl.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "gcp"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/gcp/security/gcp-sql-database-require-ssl.yaml", "description": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/gcp/security/gcp-sql-database-require-ssl.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "category": "security", "technology": ["terraform", "gcp"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/lang/security/ebs-unencrypted-volume.yaml", "description": "An EBS volume is configured without encryption enabled.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/lang/security/ebs-unencrypted-volume.yaml", "metadata": {"cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/lang/security/s3-unencrypted-bucket.yaml", "description": "This rule has been deprecated, as all s3 buckets are encrypted by default with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration for more info.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/lang/security/s3-unencrypted-bucket.yaml", "metadata": {"references": ["https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#server_side_encryption_configuration", "https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html"], "cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "deprecated": true}}, {"file_path": "../terraform/aws/security/aws-insecure-redshift-ssl-configuration.yaml", "description": "Detected an AWS Redshift configuration with a SSL disabled. To fix this, set your `require_ssl` to `\"true\"`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-insecure-redshift-ssl-configuration.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-insecure-redshift-ssl-configuration.yaml", "description": "Detected an AWS Redshift configuration with a SSL disabled. To fix this, set your `require_ssl` to `\"true\"`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-insecure-redshift-ssl-configuration.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/insecure-load-balancer-tls-version.yaml", "description": "Detected an AWS load balancer with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `ssl_policy` to `\"ELBSecurityPolicy-FS-1-2-Res-2019-08\"`, or include a default action to redirect to HTTPS.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/insecure-load-balancer-tls-version.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://www.ietf.org/rfc/rfc5246.txt"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/insecure-load-balancer-tls-version.yaml", "description": "Detected an AWS load balancer with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `ssl_policy` to `\"ELBSecurityPolicy-FS-1-2-Res-2019-08\"`, or include a default action to redirect to HTTPS.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/insecure-load-balancer-tls-version.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://www.ietf.org/rfc/rfc5246.txt"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-dynamodb-table-unencrypted.yaml", "description": "By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your data in the DynamoDB table. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-dynamodb-table-unencrypted.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "technology": ["aws", "terraform"], "category": "security", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-dynamodb-table-unencrypted.yaml", "description": "By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your data in the DynamoDB table. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-dynamodb-table-unencrypted.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "technology": ["aws", "terraform"], "category": "security", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-cloudfront-insecure-tls.yaml", "description": "Detected an AWS CloudFront Distribution with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `minimum_protocol_version` to `\"TLS1.2_2018\", \"TLS1.2_2019\" or \"TLS1.2_2021\"`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-cloudfront-insecure-tls.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-cloudfront-insecure-tls.yaml", "description": "Detected an AWS CloudFront Distribution with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `minimum_protocol_version` to `\"TLS1.2_2018\", \"TLS1.2_2019\" or \"TLS1.2_2021\"`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-cloudfront-insecure-tls.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-rds-backup-no-retention.yaml", "description": "The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-rds-backup-no-retention.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure"], "cwe": ["CWE-320: CWE CATEGORY: Key Management Errors"], "technology": ["aws", "terraform"], "category": "security", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-codebuild-project-unencrypted.yaml", "description": "The AWS CodeBuild Project is unencrypted. The AWS KMS encryption key protects projects in the CodeBuild. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-codebuild-project-unencrypted.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure"], "cwe": ["CWE-320: CWE CATEGORY: Key Management Errors"], "technology": ["aws", "terraform"], "category": "security", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-elasticsearch-nodetonode-encryption.yaml", "description": "Ensure all Elasticsearch has node-to-node encryption enabled.\t", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-elasticsearch-nodetonode-encryption.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-elasticsearch-nodetonode-encryption.yaml", "description": "Ensure all Elasticsearch has node-to-node encryption enabled.\t", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-elasticsearch-nodetonode-encryption.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-kms-no-rotation.yaml", "description": "The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-kms-no-rotation.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "technology": ["aws", "terraform"], "category": "security", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-kms-no-rotation.yaml", "description": "The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-kms-no-rotation.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-326: Inadequate Encryption Strength"], "technology": ["aws", "terraform"], "category": "security", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-ebs-snapshot-encrypted-with-cmk.yaml", "description": "Ensure EBS Snapshot is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-ebs-snapshot-encrypted-with-cmk.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure"], "cwe": ["CWE-320: CWE CATEGORY: Key Management Errors"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-cloudwatch-log-group-no-retention.yaml", "description": "The AWS CloudWatch Log Group has no retention. Missing retention in log groups can cause losing important event information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-cloudwatch-log-group-no-retention.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure"], "cwe": ["CWE-320: CWE CATEGORY: Key Management Errors"], "technology": ["aws", "terraform"], "category": "security", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-ebs-unencrypted.yaml", "description": "The AWS EBS is unencrypted. The AWS EBS encryption protects data in the EBS.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-ebs-unencrypted.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure"], "cwe": ["CWE-320: CWE CATEGORY: Key Management Errors"], "technology": ["aws", "terraform"], "category": "security", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-insecure-api-gateway-tls-version.yaml", "description": "Detected AWS API Gateway to be using an insecure version of TLS. To fix this issue make sure to set \"security_policy\" equal to \"TLS_1_2\".", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-insecure-api-gateway-tls-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["aws", "terraform"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-insecure-api-gateway-tls-version.yaml", "description": "Detected AWS API Gateway to be using an insecure version of TLS. To fix this issue make sure to set \"security_policy\" equal to \"TLS_1_2\".", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-insecure-api-gateway-tls-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "category": "security", "technology": ["aws", "terraform"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-efs-filesystem-encrypted-with-cmk.yaml", "description": "Ensure EFS filesystem is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-efs-filesystem-encrypted-with-cmk.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure"], "cwe": ["CWE-320: CWE CATEGORY: Key Management Errors"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "go": [{"file_path": "../go/lang/security/audit/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt` package.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/md5-used-as-password.yaml", "metadata": {"category": "security", "technology": ["md5"], "references": ["https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://pkg.go.dev/golang.org/x/crypto/bcrypt"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/audit/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt` package.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/md5-used-as-password.yaml", "metadata": {"category": "security", "technology": ["md5"], "references": ["https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://pkg.go.dev/golang.org/x/crypto/bcrypt"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec#available-rules", "category": "security", "technology": ["go"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec#available-rules", "category": "security", "technology": ["go"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec#available-rules", "category": "security", "technology": ["go"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec#available-rules", "category": "security", "technology": ["go"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "description": "Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec#available-rules", "category": "security", "technology": ["go"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "description": "Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec#available-rules", "category": "security", "technology": ["go"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "description": "Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec#available-rules", "category": "security", "technology": ["go"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "description": "Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/use_of_weak_crypto.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec#available-rules", "category": "security", "technology": ["go"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/bad_imports.yaml", "description": "The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/bad_imports.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec", "references": ["https://godoc.org/golang.org/x/crypto/sha3"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/bad_imports.yaml", "description": "The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/bad_imports.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://github.com/securego/gosec", "references": ["https://godoc.org/golang.org/x/crypto/sha3"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/crypto/math_random.yaml", "description": "Do not use `math/rand`. Use `crypto/rand` instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/crypto/math_random.yaml", "metadata": {"cwe": ["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"], "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/net/use-tls.yaml", "description": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/net/use-tls.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://golang.org/pkg/net/http/#ListenAndServeTLS"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/net/use-tls.yaml", "description": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/net/use-tls.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://golang.org/pkg/net/http/#ListenAndServeTLS"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}], "python": [{"file_path": "../python/jwt/security/jwt-none-alg.yaml", "description": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/jwt/security/jwt-none-alg.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "category": "security", "technology": ["jwt"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/jwt/security/jwt-none-alg.yaml", "description": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/jwt/security/jwt-none-alg.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/", "category": "security", "technology": ["jwt"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/mode-without-authentication.yaml", "description": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/mode-without-authentication.yaml", "metadata": {"category": "security", "technology": ["cryptography"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/mode-without-authentication.yaml", "description": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/mode-without-authentication.yaml", "metadata": {"category": "security", "technology": ["cryptography"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-hash-algorithm-md4.yaml", "description": "Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-hash-algorithm-md4.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-hash-algorithm-md4.yaml", "description": "Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-hash-algorithm-md4.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insufficient-rsa-key-size.yaml", "description": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insufficient-rsa-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insufficient-rsa-key-size.yaml", "description": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insufficient-rsa-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-hash-algorithm-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-hash-algorithm-md5.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-hash-algorithm-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-hash-algorithm-md5.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm-rc2.yaml", "description": "Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm-rc2.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://cwe.mitre.org/data/definitions/326.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm-rc2.yaml", "description": "Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm-rc2.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://cwe.mitre.org/data/definitions/326.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm-blowfish.yaml", "description": "Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm-blowfish.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm-blowfish.yaml", "description": "Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm-blowfish.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-hash-algorithm-md2.yaml", "description": "Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-hash-algorithm-md2.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-hash-algorithm-md2.yaml", "description": "Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-hash-algorithm-md2.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm.yaml", "description": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm.yaml", "description": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm-rc4.yaml", "description": "Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm-rc4.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://cwe.mitre.org/data/definitions/326.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm-rc4.yaml", "description": "Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm-rc4.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://cwe.mitre.org/data/definitions/326.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insufficient-dsa-key-size.yaml", "description": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insufficient-dsa-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insufficient-dsa-key-size.yaml", "description": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insufficient-dsa-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-hash-algorithm.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-hash-algorithm.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-hash-algorithm.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-hash-algorithm.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm-des.yaml", "description": "Detected DES cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm-des.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://cwe.mitre.org/data/definitions/326.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pycryptodome/security/insecure-cipher-algorithm-des.yaml", "description": "Detected DES cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pycryptodome/security/insecure-cipher-algorithm-des.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://cwe.mitre.org/data/definitions/326.html"], "category": "security", "technology": ["pycryptodome"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/distributed/security.yaml", "description": "Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/distributed/security.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"], "category": "security", "technology": ["distributed"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/distributed/security.yaml", "description": "Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/distributed/security.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"], "category": "security", "technology": ["distributed"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/mode-without-authentication.yaml", "description": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/mode-without-authentication.yaml", "metadata": {"category": "security", "technology": ["cryptography"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/mode-without-authentication.yaml", "description": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/mode-without-authentication.yaml", "metadata": {"category": "security", "technology": ["cryptography"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insufficient-rsa-key-size.yaml", "description": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insufficient-rsa-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "category": "security", "technology": ["cryptography"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insufficient-rsa-key-size.yaml", "description": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insufficient-rsa-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "category": "security", "technology": ["cryptography"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insufficient-ec-key-size.yaml", "description": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insufficient-ec-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf", "https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves"], "category": "security", "technology": ["cryptography"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insufficient-ec-key-size.yaml", "description": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insufficient-ec-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf", "https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves"], "category": "security", "technology": ["cryptography"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-hash-algorithms.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-hash-algorithms.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B303", "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-hash-algorithms.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-hash-algorithms.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B303", "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-cipher-algorithms-blowfish.yaml", "description": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-cipher-algorithms-blowfish.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://tools.ietf.org/html/rfc5469"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-cipher-algorithms-blowfish.yaml", "description": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-cipher-algorithms-blowfish.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://tools.ietf.org/html/rfc5469"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-cipher-algorithms-arc4.yaml", "description": "Detected ARC4 cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-cipher-algorithms-arc4.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://tools.ietf.org/html/rfc5469"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-cipher-algorithms-arc4.yaml", "description": "Detected ARC4 cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-cipher-algorithms-arc4.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://tools.ietf.org/html/rfc5469"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insufficient-dsa-key-size.yaml", "description": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insufficient-dsa-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insufficient-dsa-key-size.yaml", "description": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insufficient-dsa-key-size.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py", "references": ["https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-hash-algorithms-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-hash-algorithms-md5.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B303", "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-hash-algorithms-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-hash-algorithms-md5.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B303", "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-cipher-algorithms.yaml", "description": "Detected IDEA cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-cipher-algorithms.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://tools.ietf.org/html/rfc5469"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/cryptography/security/insecure-cipher-algorithms.yaml", "description": "Detected IDEA cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/cryptography/security/insecure-cipher-algorithms.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B304", "references": ["https://tools.ietf.org/html/rfc5469"], "category": "security", "technology": ["cryptography"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/unverified-ssl-context.yaml", "description": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/unverified-ssl-context.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-295: Improper Certificate Validation"], "references": ["https://docs.python.org/3/library/ssl.html#ssl-security", "https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"], "category": "security", "technology": ["python"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/insecure-hash-algorithms.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/insecure-hash-algorithms.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B303", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["python"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/insecure-hash-algorithms.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/insecure-hash-algorithms.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B303", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["python"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/insecure-hash-algorithms-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/insecure-hash-algorithms-md5.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B303", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["python"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/insecure-hash-algorithms-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/insecure-hash-algorithms-md5.yaml", "metadata": {"source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "bandit-code": "B303", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html", "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability", "http://2012.sharcs.org/slides/stevens.pdf", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["python"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/insecure-hash-function.yaml", "description": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/insecure-hash-function.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["python"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/insecure-hash-function.yaml", "description": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/insecure-hash-function.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.2 Insecure Custom Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"], "category": "security", "technology": ["python"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/weak-ssl-version.yaml", "description": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/weak-ssl-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30", "asvs": {"section": "V9 Communications Verification Requirements", "control_id": "9.1.3 Weak TLS", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements", "version": "4"}, "references": ["https://tools.ietf.org/html/rfc7568", "https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html", "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2"], "category": "security", "technology": ["python"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/weak-ssl-version.yaml", "description": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/weak-ssl-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30", "asvs": {"section": "V9 Communications Verification Requirements", "control_id": "9.1.3 Weak TLS", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements", "version": "4"}, "references": ["https://tools.ietf.org/html/rfc7568", "https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html", "https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2"], "category": "security", "technology": ["python"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/ssl-wrap-socket-is-deprecated.yaml", "description": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/ssl-wrap-socket-is-deprecated.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://docs.python.org/3/library/ssl.html#ssl.wrap_socket", "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket"], "category": "security", "technology": ["python"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/ssl-wrap-socket-is-deprecated.yaml", "description": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/ssl-wrap-socket-is-deprecated.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://docs.python.org/3/library/ssl.html#ssl.wrap_socket", "https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket"], "category": "security", "technology": ["python"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/network/http-not-https-connection.yaml", "description": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/network/http-not-https-connection.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool"], "category": "security", "technology": ["python"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/network/http-not-https-connection.yaml", "description": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/network/http-not-https-connection.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool"], "category": "security", "technology": ["python"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/network/disabled-cert-validation.yaml", "description": "certificate verification explicitly disabled, insecure connections possible", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/network/disabled-cert-validation.yaml", "metadata": {"cwe": ["CWE-295: Improper Certificate Validation"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "category": "security", "technology": ["python"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "typescript": [{"file_path": "../typescript/aws-cdk/security/audit/awscdk-bucket-enforcessl.yml", "description": "Bucket $X is not set to enforce encryption-in-transit, if not explictly setting this on the bucket policy - the property \"enforceSSL\" should be set to true", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/aws-cdk/security/audit/awscdk-bucket-enforcessl.yml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "category": "security", "technology": ["AWS-CDK"], "references": ["https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../typescript/aws-cdk/security/audit/awscdk-bucket-enforcessl.yml", "description": "Bucket $X is not set to enforce encryption-in-transit, if not explictly setting this on the bucket policy - the property \"enforceSSL\" should be set to true", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/aws-cdk/security/audit/awscdk-bucket-enforcessl.yml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "category": "security", "technology": ["AWS-CDK"], "references": ["https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../typescript/react/security/react-insecure-request.yaml", "description": "Unencrypted request over HTTP detected.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/react/security/react-insecure-request.yaml", "metadata": {"vulnerability": "Insecure Transport", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "references": ["https://www.npmjs.com/package/axios"], "category": "security", "technology": ["react"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../typescript/react/security/react-insecure-request.yaml", "description": "Unencrypted request over HTTP detected.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/react/security/react-insecure-request.yaml", "metadata": {"vulnerability": "Insecure Transport", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "references": ["https://www.npmjs.com/package/axios"], "category": "security", "technology": ["react"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/audit/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/md5-used-as-password.yaml", "metadata": {"category": "security", "technology": ["java", "md5"], "references": ["https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory", "https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/md5-used-as-password.yaml", "metadata": {"category": "security", "technology": ["java", "md5"], "references": ["https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory", "https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "kotlin": [{"file_path": "../kotlin/lang/security/use-of-sha1.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/use-of-sha1.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["kotlin"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../kotlin/lang/security/use-of-sha1.yaml", "description": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/use-of-sha1.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["kotlin"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../kotlin/lang/security/ecb-cipher.yaml", "description": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/ecb-cipher.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#ECB_MODE", "category": "security", "technology": ["kotlin"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../kotlin/lang/security/ecb-cipher.yaml", "description": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/ecb-cipher.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#ECB_MODE", "category": "security", "technology": ["kotlin"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../kotlin/lang/security/use-of-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/use-of-md5.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5", "category": "security", "technology": ["kotlin"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../kotlin/lang/security/use-of-md5.yaml", "description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/use-of-md5.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5", "category": "security", "technology": ["kotlin"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../kotlin/lang/security/no-null-cipher.yaml", "description": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/no-null-cipher.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["kotlin"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../kotlin/lang/security/no-null-cipher.yaml", "description": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/no-null-cipher.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER", "asvs": {"section": "V6 Stored Cryptography Verification Requirements", "control_id": "6.2.5 Insecure Algorithm", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms", "version": "4"}, "category": "security", "technology": ["kotlin"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/md5-used-as-password.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://www.php.net/password_hash"], "category": "security", "technology": ["md5"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/md5-used-as-password.yaml", "metadata": {"cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://www.php.net/password_hash"], "category": "security", "technology": ["md5"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "yaml": [{"file_path": "../yaml/kubernetes/security/skip-tls-verify-service.yaml", "description": "Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/skip-tls-verify-service.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "references": ["https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#apiservice-v1-apiregistration-k8s-io"], "category": "security", "technology": ["kubernetes"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/skip-tls-verify-service.yaml", "description": "Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/skip-tls-verify-service.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "references": ["https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#apiservice-v1-apiregistration-k8s-io"], "category": "security", "technology": ["kubernetes"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/skip-tls-verify-cluster.yaml", "description": "Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/skip-tls-verify-cluster.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "references": ["https://kubernetes.io/docs/reference/config-api/client-authentication.v1beta1/#client-authentication-k8s-io-v1beta1-Cluster"], "category": "security", "technology": ["kubernetes"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/skip-tls-verify-cluster.yaml", "description": "Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/skip-tls-verify-cluster.yaml", "metadata": {"cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "references": ["https://kubernetes.io/docs/reference/config-api/client-authentication.v1beta1/#client-authentication-k8s-io-v1beta1-Cluster"], "category": "security", "technology": ["kubernetes"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "generic": [{"file_path": "../generic/nginx/security/missing-ssl-version.yaml", "description": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/nginx/security/missing-ssl-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://www.acunetix.com/blog/web-security-zone/hardening-nginx/", "https://nginx.org/en/docs/http/configuring_https_servers.html"], "category": "security", "technology": ["nginx"], "confidence": "MEDIUM", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../generic/nginx/security/missing-ssl-version.yaml", "description": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/nginx/security/missing-ssl-version.yaml", "metadata": {"cwe": ["CWE-326: Inadequate Encryption Strength"], "references": ["https://www.acunetix.com/blog/web-security-zone/hardening-nginx/", "https://nginx.org/en/docs/http/configuring_https_servers.html"], "category": "security", "technology": ["nginx"], "confidence": "MEDIUM", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/dotnet/security/use_weak_rng_for_keygeneration.yaml", "description": "You are using an insecure random number generator (RNG) to create a cryptographic key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/use_weak_rng_for_keygeneration.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH", "category": "security", "cwe": ["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"], "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://learn.microsoft.com/en-us/dotnet/api/system.random?view=net-6.0#remarks", "https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=net-6.0", "https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0#constructors", "https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.symmetricalgorithm.key?view=net-6.0#system-security-cryptography-symmetricalgorithm-key"], "subcategory": ["vuln"], "technology": [".net"]}}, {"file_path": "../csharp/dotnet/security/use_weak_rsa_encryption_padding.yaml", "description": "You are using the outdated PKCS#1 v1.5 encryption padding for your RSA key. Use the OAEP padding instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/use_weak_rsa_encryption_padding.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-780: Use of RSA Algorithm without OAEP"], "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangeformatter", "https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangeformatter", "https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsapkcs1keyexchangedeformatter", "https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rsaoaepkeyexchangedeformatter"], "subcategory": ["vuln"], "technology": [".net"]}}, {"file_path": "../csharp/dotnet/security/use_deprecated_cipher_algorithm.yaml", "description": "Usage of deprecated cipher algorithm detected. Use Aes or ChaCha20Poly1305 instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/use_deprecated_cipher_algorithm.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.des?view=net-6.0#remarks", "https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.rc2?view=net-6.0#remarks", "https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aes?view=net-6.0", "https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0"], "subcategory": ["vuln"], "technology": [".net"]}}, {"file_path": "../csharp/lang/security/cryptography/unsigned-security-token.yaml", "description": "Accepting unsigned security tokens as valid security tokens allows an attacker to remove its signature and potentially forge an identity. As a fix, set RequireSignedTokens to be true.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/cryptography/unsigned-security-token.yaml", "metadata": {"category": "security", "technology": ["csharp"], "owasp": ["A02:2021 - Cryptographic Failures"], "cwe": ["CWE-347: Improper Verification of Cryptographic Signature"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/", "https://cwe.mitre.org/data/definitions/347"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/lang/security/ssl-mode-no-verify.yaml", "description": "Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/ssl-mode-no-verify.yaml", "metadata": {"cwe": ["CWE-295: Improper Certificate Validation"], "category": "security", "technology": ["ruby"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/md5-used-as-password.yaml", "metadata": {"category": "security", "technology": ["md5"], "references": ["https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/md5-used-as-password.yaml", "description": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/md5-used-as-password.yaml", "metadata": {"category": "security", "technology": ["md5"], "references": ["https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/weak-hashes-sha1.yaml", "description": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/weak-hashes-sha1.yaml", "metadata": {"cwe": ["CWE-328: Use of Weak Hash"], "references": ["https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html", "https://shattered.io/"], "category": "security", "technology": ["ruby"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/lang/security/weak-hashes-sha1.yaml", "description": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/weak-hashes-sha1.yaml", "metadata": {"cwe": ["CWE-328: Use of Weak Hash"], "references": ["https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html", "https://shattered.io/"], "category": "security", "technology": ["ruby"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-regex-dos.yaml", "description": "Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-regex-dos.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb", "category": "security", "cwe": ["CWE-1333: Inefficient Regular Expression Complexity"], "owasp": ["A03:2017 - Sensitive Data Exposure"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "Not OWASP Related": {"terraform": [{"file_path": "../terraform/azure/security/keyvault/keyvault-ensure-secret-expires.yaml", "description": "Ensure that the expiration date is set on all secrets", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/keyvault/keyvault-ensure-secret-expires.yaml", "metadata": {"cwe": ["CWE-262: Not Using Password Aging"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#expiration_date", "https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/keyvault/keyvault-purge-enabled.yaml", "description": "Key vault should have purge protection enabled", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/keyvault/keyvault-purge-enabled.yaml", "metadata": {"cwe": ["CWE-693: Protection Mechanism Failure"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#purge_protection_enabled", "https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview#purge-protection"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/keyvault/keyvault-ensure-key-expires.yaml", "description": "Ensure that the expiration date is set on all keys", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/keyvault/keyvault-ensure-key-expires.yaml", "metadata": {"cwe": ["CWE-262: Not Using Password Aging"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_key#expiration_date", "https://docs.microsoft.com/en-us/powershell/module/az.keyvault/update-azkeyvaultkey?view=azps-5.8.0#example-1--modify-a-key-to-enable-it--and-set-the-expiration-date-and-tags"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "go": [{"file_path": "../go/gorilla/security/audit/handler-assignment-from-multiple-sources.yaml", "description": "Variable $VAR is assigned from two different sources: '$Y' and '$R'. Make sure this is intended, as this could cause logic bugs if they are treated as they are the same object.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/gorilla/security/audit/handler-assignment-from-multiple-sources.yaml", "metadata": {"cwe": ["CWE-289: Authentication Bypass by Alternate Name"], "category": "security", "technology": ["gorilla"], "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://cwe.mitre.org/data/definitions/289.html"], "subcategory": ["audit"], "impact": "MEDIUM", "likelihood": "LOW"}}], "python": [{"file_path": "../python/flask/security/injection/nan-injection.yaml", "description": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/nan-injection.yaml", "metadata": {"references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "category": "security", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "technology": ["flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/nan-injection.yaml", "description": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/nan-injection.yaml", "metadata": {"references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "category": "security", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "technology": ["django"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}], "yaml": [{"file_path": "../yaml/kubernetes/security/privileged-container.yaml", "description": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/privileged-container.yaml", "metadata": {"cwe": ["CWE-250: Execution with Unnecessary Privileges"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"], "category": "security", "technology": ["kubernetes"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/run-as-non-root-unsafe-value.test.yaml", "description": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/run-as-non-root-unsafe-value.test.yaml", "metadata": {"cwe": ["CWE-250: Execution with Unnecessary Privileges"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html"], "category": "security", "technology": ["kubernetes"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/lang/security/divide-by-zero.yaml", "description": "Detected a possible ZeroDivisionError.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/divide-by-zero.yaml", "metadata": {"cwe": ["CWE-369: Divide By Zero"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb"], "category": "security", "technology": ["ruby"], "confidence": "MEDIUM", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-reverse-tabnabbing.yaml", "description": "Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows reverse tabnabbing on Internet Explorer, Opera, and Android Webview.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-reverse-tabnabbing.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_reverse_tabnabbing.rb", "category": "security", "cwe": ["CWE-1022: Use of Web Link to Untrusted Target with window.opener Access"], "technology": ["ruby", "rails"], "references": ["https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#browser_compatibility", "https://github.com/presidentbeef/brakeman/blob/3f5d5d5/test/apps/rails5/app/views/users/show.html.erb"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A04:2021 - Insecure Design": {"terraform": [{"file_path": "../terraform/azure/security/appservice/appservice-enable-http2.yaml", "description": "Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your appservice resource block", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/appservice-enable-http2.yaml", "metadata": {"cwe": ["CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#http2_enabled"], "owasp": ["A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/lang/security/ebs-unencrypted-volume.yaml", "description": "An EBS volume is configured without encryption enabled.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/lang/security/ebs-unencrypted-volume.yaml", "metadata": {"cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/lang/security/s3-unencrypted-bucket.yaml", "description": "This rule has been deprecated, as all s3 buckets are encrypted by default with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration for more info.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/lang/security/s3-unencrypted-bucket.yaml", "metadata": {"references": ["https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#server_side_encryption_configuration", "https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html"], "cwe": ["CWE-311: Missing Encryption of Sensitive Data"], "category": "security", "technology": ["terraform", "aws"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "deprecated": true}}, {"file_path": "../terraform/lang/security/rds-insecure-password-storage-in-source-code.yaml", "description": "RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/lang/security/rds-insecure-password-storage-in-source-code.yaml", "metadata": {"references": ["https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password", "https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password"], "cwe": ["CWE-522: Insufficiently Protected Credentials"], "category": "security", "technology": ["terraform", "aws"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "dockerfile": [{"file_path": "../dockerfile/security/missing-user-entrypoint.yaml", "description": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/dockerfile/security/missing-user-entrypoint.yaml", "metadata": {"cwe": ["CWE-269: Improper Privilege Management"], "category": "security", "technology": ["dockerfile"], "confidence": "MEDIUM", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../dockerfile/security/missing-user.yaml", "description": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/dockerfile/security/missing-user.yaml", "metadata": {"cwe": ["CWE-269: Improper Privilege Management"], "category": "security", "technology": ["dockerfile"], "confidence": "MEDIUM", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../dockerfile/security/last-user-is-root.yaml", "description": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/dockerfile/security/last-user-is-root.yaml", "metadata": {"cwe": ["CWE-269: Improper Privilege Management"], "source-rule-url": "https://github.com/hadolint/hadolint/wiki/DL3002", "references": ["https://github.com/hadolint/hadolint/wiki/DL3002"], "category": "security", "technology": ["dockerfile"], "confidence": "MEDIUM", "owasp": ["A04:2021 - Insecure Design"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/audit/tainted-session-from-http-request.yaml", "description": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/tainted-session-from-http-request.yaml", "metadata": {"category": "security", "technology": ["java"], "cwe": ["CWE-501: Trust Boundary Violation"], "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}], "generic": [{"file_path": "../generic/dockerfile/security/last-user-is-root.yaml", "description": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/dockerfile/security/last-user-is-root.yaml", "metadata": {"cwe": ["CWE-269: Improper Privilege Management"], "source-rule-url": "https://github.com/hadolint/hadolint/wiki/DL3002", "references": ["https://github.com/hadolint/hadolint/wiki/DL3002"], "category": "security", "technology": ["dockerfile"], "confidence": "MEDIUM", "owasp": ["A04:2021 - Insecure Design"], "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/x-frame-options-misconfiguration.yaml", "description": "By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/x-frame-options-misconfiguration.yaml", "metadata": {"references": ["https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"], "owasp": ["A04:2021 - Insecure Design"], "cwe": ["CWE-451: User Interface (UI) Misrepresentation of Critical Information"], "category": "security", "technology": ["express"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/audit/express-res-sendfile.yaml", "description": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-res-sendfile.yaml", "metadata": {"references": ["https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"], "technology": ["express"], "category": "security", "cwe": ["CWE-73: External Control of File Name or Path"], "owasp": ["A04:2021 - Insecure Design"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/audit/express-jwt-not-revoked.yaml", "description": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-jwt-not-revoked.yaml", "metadata": {"cwe": ["CWE-522: Insufficiently Protected Credentials"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "source-rule-url": "https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md", "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.3 Insecue Stateless Session Tokens", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["express"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"]}}], "ruby": [{"file_path": "../ruby/rails/security/brakeman/check-send-file.yaml", "description": "Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-send-file.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send_file.rb", "category": "security", "cwe": ["CWE-73: External Control of File Name or Path"], "owasp": ["A04:2021 - Insecure Design"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/www-community/attacks/Path_Traversal", "https://owasp.org/Top10/A01_2021-Broken_Access_Control/"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-http-verb-confusion.yaml", "description": "Found an improperly constructed control flow block with `request.get?`. Rails will route HEAD requests as GET requests but they will fail the `request.get?` check, potentially causing unexpected behavior unless an `elif` condition is used.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-http-verb-confusion.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_verb_confusion.rb", "category": "security", "cwe": ["CWE-650: Trusting HTTP Permission Methods on the Server Side"], "owasp": ["A04:2021 - Insecure Design"], "technology": ["ruby", "rails"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/accounts_controller.rb"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A07:2021 - Identification and Authentication Failures": {"terraform": [{"file_path": "../terraform/azure/security/appservice/appservice-require-client-cert.yaml", "description": "Detected an AppService that was not configured to use a client certificate. Add `client_cert_enabled = true` in your resource block.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/appservice-require-client-cert.yaml", "metadata": {"cwe": ["CWE-295: Improper Certificate Validation"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#client_cert_enabled"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/azure/security/appservice/appservice-authentication-enabled.yaml", "description": "Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/appservice-authentication-enabled.yaml", "metadata": {"cwe": ["CWE-287: Improper Authentication"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#auth_settings"], "owasp": ["A02:2017 - Broken Authentication", "A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-provider-static-credentials.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-provider-static-credentials.yaml", "metadata": {"technology": ["secrets", "aws", "terraform"], "category": "security", "cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "go": [{"file_path": "../go/jwt-go/security/jwt.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/jwt-go/security/jwt.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "category": "security", "technology": ["jwt", "secrets"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "interfile": true}}], "python": [{"file_path": "../python/jwt/security/unverified-jwt-decode.yaml", "description": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/jwt/security/unverified-jwt-decode.yaml", "metadata": {"owasp": ["A02:2017 - Broken Authentication", "A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-287: Improper Authentication"], "references": ["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"], "category": "security", "technology": ["jwt"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/unverified-ssl-context.yaml", "description": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/unverified-ssl-context.yaml", "metadata": {"owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-295: Improper Certificate Validation"], "references": ["https://docs.python.org/3/library/ssl.html#ssl-security", "https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"], "category": "security", "technology": ["python"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/network/disabled-cert-validation.yaml", "description": "certificate verification explicitly disabled, insecure connections possible", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/network/disabled-cert-validation.yaml", "metadata": {"cwe": ["CWE-295: Improper Certificate Validation"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "category": "security", "technology": ["python"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/passwords/password-empty-string.yaml", "description": "'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/passwords/password-empty-string.yaml", "metadata": {"cwe": ["CWE-521: Weak Password Requirements"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password"], "category": "security", "technology": ["django"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/passwords/use-none-for-password-default.yaml", "description": "'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/passwords/use-none-for-password-default.yaml", "metadata": {"cwe": ["CWE-521: Weak Password Requirements"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password"], "category": "security", "technology": ["django"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/boto3/security/hardcoded-token.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/boto3/security/hardcoded-token.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html", "https://bento.dev/checks/boto3/hardcoded-access-token/", "https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "category": "security", "technology": ["boto3", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "typescript": [{"file_path": "../typescript/aws-cdk/security/awscdk-codebuild-project-public.yml", "description": "CodeBuild Project $X is set to have a public URL. This will make the build results, logs, artifacts publically accessible, including builds prior to the project being public. Ensure this is acceptable for the project.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/aws-cdk/security/awscdk-codebuild-project-public.yml", "metadata": {"category": "security", "cwe": ["CWE-306: Missing Authentication for Critical Function"], "technology": ["AWS-CDK"], "references": ["https://docs.aws.amazon.com/codebuild/latest/userguide/public-builds.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/audit/insecure-smtp-connection.yaml", "description": "Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/insecure-smtp-connection.yaml", "metadata": {"cwe": ["CWE-297: Improper Validation of Certificate with Host Mismatch"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#INSECURE_SMTP_SSL", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "kotlin": [{"file_path": "../kotlin/lang/security/anonymous-ldap-bind.yaml", "description": "Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/anonymous-ldap-bind.yaml", "metadata": {"cwe": ["CWE-287: Improper Authentication"], "owasp": ["A02:2017 - Broken Authentication", "A07:2021 - Identification and Authentication Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS", "category": "security", "technology": ["kotlin"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "yaml": [{"file_path": "../yaml/kubernetes/security/secrets-in-config-file.yaml", "description": "Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/secrets-in-config-file.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "category": "security", "technology": ["kubernetes"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://kubernetes.io/docs/concepts/configuration/secret/", "https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF", "https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html", "https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/", "https://github.com/bitnami-labs/sealed-secrets", "https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/", "https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/run-as-non-root-security-context-pod-level.test.yaml", "description": "Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/run-as-non-root-security-context-pod-level.test.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "category": "security", "technology": ["kubernetes"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://kubernetes.io/docs/concepts/configuration/secret/", "https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF", "https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html", "https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/", "https://github.com/bitnami-labs/sealed-secrets", "https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/", "https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/run-as-non-root-container-level-missing-security-context.fixed.test.yaml", "description": "Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/run-as-non-root-container-level-missing-security-context.fixed.test.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "category": "security", "technology": ["kubernetes"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://kubernetes.io/docs/concepts/configuration/secret/", "https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF", "https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html", "https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/", "https://github.com/bitnami-labs/sealed-secrets", "https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/", "https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/run-as-non-root.fixed.test.yaml", "description": "Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. ", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/run-as-non-root.fixed.test.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "category": "security", "technology": ["kubernetes"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://kubernetes.io/docs/concepts/configuration/secret/", "https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/0/CTR_Kubernetes_Hardening_Guidance_1.1_20220315.PDF", "https://docs.gitlab.com/ee/user/clusters/agent/gitops/secrets_management.html", "https://www.cncf.io/blog/2021/04/22/revealing-the-secrets-of-kubernetes-secrets/", "https://github.com/bitnami-labs/sealed-secrets", "https://www.cncf.io/blog/2022/01/25/secrets-management-essential-when-using-kubernetes/", "https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "generic": [{"file_path": "../generic/secrets/security/detected-username-and-password-in-uri.yaml", "description": "Username and password in URI detected", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/secrets/security/detected-username-and-password-in-uri.yaml", "metadata": {"owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go"], "category": "security", "technology": ["secrets"], "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/cors-misconfiguration.yaml", "description": "By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/cors-misconfiguration.yaml", "metadata": {"owasp": ["A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-346: Origin Validation Error"], "category": "security", "references": ["https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"], "technology": ["express"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/jsonwebtoken/security/jwt-hardcode.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/jsonwebtoken/security/jwt-hardcode.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.2 Static API keys or secret", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["jwt", "javascript", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}, {"file_path": "../javascript/passport-jwt/security/passport-hardcode.yaml", "description": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/passport-jwt/security/passport-hardcode.yaml", "metadata": {"cwe": ["CWE-798: Use of Hard-coded Credentials"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"], "owasp": ["A07:2021 - Identification and Authentication Failures"], "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.2 Static API keys or secret", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["jwt", "nodejs", "secrets"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "HIGH"}}], "ruby": [{"file_path": "../ruby/lang/security/ssl-mode-no-verify.yaml", "description": "Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/ssl-mode-no-verify.yaml", "metadata": {"cwe": ["CWE-295: Improper Certificate Validation"], "category": "security", "technology": ["ruby"], "owasp": ["A03:2017 - Sensitive Data Exposure", "A07:2021 - Identification and Authentication Failures"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A2: Broken Authentication": {"terraform": [{"file_path": "../terraform/azure/security/appservice/appservice-authentication-enabled.yaml", "description": "Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/azure/security/appservice/appservice-authentication-enabled.yaml", "metadata": {"cwe": ["CWE-287: Improper Authentication"], "category": "security", "technology": ["terraform", "azure"], "references": ["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#auth_settings"], "owasp": ["A02:2017 - Broken Authentication", "A07:2021 - Identification and Authentication Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/lang/security/rds-insecure-password-storage-in-source-code.yaml", "description": "RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/lang/security/rds-insecure-password-storage-in-source-code.yaml", "metadata": {"references": ["https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password", "https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password"], "cwe": ["CWE-522: Insufficiently Protected Credentials"], "category": "security", "technology": ["terraform", "aws"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "python": [{"file_path": "../python/jwt/security/unverified-jwt-decode.yaml", "description": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/jwt/security/unverified-jwt-decode.yaml", "metadata": {"owasp": ["A02:2017 - Broken Authentication", "A07:2021 - Identification and Authentication Failures"], "cwe": ["CWE-287: Improper Authentication"], "references": ["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"], "category": "security", "technology": ["jwt"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "kotlin": [{"file_path": "../kotlin/lang/security/anonymous-ldap-bind.yaml", "description": "Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/kotlin/lang/security/anonymous-ldap-bind.yaml", "metadata": {"cwe": ["CWE-287: Improper Authentication"], "owasp": ["A02:2017 - Broken Authentication", "A07:2021 - Identification and Authentication Failures"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS", "category": "security", "technology": ["kotlin"], "references": ["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/audit/express-jwt-not-revoked.yaml", "description": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-jwt-not-revoked.yaml", "metadata": {"cwe": ["CWE-522: Insufficiently Protected Credentials"], "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "source-rule-url": "https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md", "asvs": {"section": "V3: Session Management Verification Requirements", "control_id": "3.5.3 Insecue Stateless Session Tokens", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management", "version": "4"}, "category": "security", "technology": ["express"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"]}}]}, "A5: Broken Access Control": {"terraform": [{"file_path": "../terraform/gcp/security/gcp-sql-public-database.yaml", "description": "Ensure that Cloud SQL database Instances are not open to the world", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/gcp/security/gcp-sql-public-database.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-284: Improper Access Control"], "category": "security", "technology": ["terraform", "gcp"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/gcp/security/gcp-sql-public-database.yaml", "description": "Ensure that Cloud SQL database Instances are not open to the world", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/gcp/security/gcp-sql-public-database.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-284: Improper Access Control"], "category": "security", "technology": ["terraform", "gcp"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/lang/security/s3-public-rw-bucket.yaml", "description": "S3 bucket with public read-write access detected.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/lang/security/s3-public-rw-bucket.yaml", "metadata": {"references": ["https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl", "https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl"], "cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "category": "security", "technology": ["terraform", "aws"], "owasp": ["A01:2021 - Broken Access Control"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-ec2-has-public-ip.yaml", "description": "EC2 instances should not have a public IP address attached in order to block public access to the instances. To fix this, set your `associate_public_ip_address` to `\"false\"`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-ec2-has-public-ip.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-284: Improper Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-ec2-has-public-ip.yaml", "description": "EC2 instances should not have a public IP address attached in order to block public access to the instances. To fix this, set your `associate_public_ip_address` to `\"false\"`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-ec2-has-public-ip.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-284: Improper Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-subnet-has-public-ip-address.yaml", "description": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-subnet-has-public-ip-address.yaml", "metadata": {"category": "security", "technology": ["terraform", "aws"], "owasp": ["A01:2021 - Broken Access Control"], "cwe": ["CWE-284: Improper Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet#map_public_ip_on_launch", "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "go": [{"file_path": "../go/lang/security/filepath-clean-misuse.yaml", "description": "`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/filepath-clean-misuse.yaml", "metadata": {"references": ["https://pkg.go.dev/path#Clean", "http://technosophos.com/2016/03/31/go-quickly-cleaning-filepaths.html", "https://labs.detectify.com/2021/12/15/zero-day-path-traversal-grafana/", "https://dzx.cz/2021/04/02/go_path_traversal/", "https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "category": "security", "technology": ["go"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/filepath-clean-misuse.yaml", "description": "`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/filepath-clean-misuse.yaml", "metadata": {"references": ["https://pkg.go.dev/path#Clean", "http://technosophos.com/2016/03/31/go-quickly-cleaning-filepaths.html", "https://labs.detectify.com/2021/12/15/zero-day-path-traversal-grafana/", "https://dzx.cz/2021/04/02/go_path_traversal/", "https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "category": "security", "technology": ["go"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/audit/net/fs-directory-listing.yaml", "description": "Detected usage of 'http.FileServer' as handler: this allows directory listing and an attacker could navigate through directories looking for sensitive files. Be sure to disable directory listing or restrict access to specific directories/files.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/net/fs-directory-listing.yaml", "metadata": {"category": "security", "cwe": ["CWE-548: Exposure of Information Through Directory Listing"], "owasp": ["A06:2017 - Security Misconfiguration", "A01:2021 - Broken Access Control"], "references": ["https://github.com/OWASP/Go-SCP", "https://cwe.mitre.org/data/definitions/548.html"], "confidence": "MEDIUM", "technology": ["go"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "python": [{"file_path": "../python/flask/security/audit/app-run-security-config.yaml", "description": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/audit/app-run-security-config.yaml", "metadata": {"cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"], "owasp": ["A01:2021 - Broken Access Control"], "category": "security", "technology": ["flask"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/insecure-file-permissions.yaml", "description": "These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/insecure-file-permissions.yaml", "metadata": {"category": "security", "owasp": ["A01:2021 - Broken Access Control"], "cwe": ["CWE-276: Incorrect Default Permissions"], "technology": ["python"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/open-redirect.yaml", "description": "Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/open-redirect.yaml", "metadata": {"cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/", "https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231"], "category": "security", "technology": ["django"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/request-data-fileresponse.yaml", "description": "Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/request-data-fileresponse.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/request-data-fileresponse.yaml", "description": "Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/request-data-fileresponse.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/path-traversal/path-traversal-open.yaml", "description": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/path-traversal/path-traversal-open.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://owasp.org/www-community/attacks/Path_Traversal"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/path-traversal/path-traversal-open.yaml", "description": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/path-traversal/path-traversal-open.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://owasp.org/www-community/attacks/Path_Traversal"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/httpservlet-path-traversal.yaml", "description": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/httpservlet-path-traversal.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN", "references": ["https://www.owasp.org/index.php/Path_Traversal"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/httpservlet-path-traversal.yaml", "description": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/httpservlet-path-traversal.yaml", "metadata": {"cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN", "references": ["https://www.owasp.org/index.php/Path_Traversal"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/spring/security/audit/spring-unvalidated-redirect.yaml", "description": "Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/audit/spring-unvalidated-redirect.yaml", "metadata": {"cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "owasp": ["A01:2021 - Broken Access Control"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT", "category": "security", "technology": ["spring"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/phpinfo-use.yaml", "description": "The 'phpinfo' function may reveal sensitive information about your environment.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/phpinfo-use.yaml", "metadata": {"cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "references": ["https://www.php.net/manual/en/function.phpinfo", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php"], "category": "security", "technology": ["php"], "owasp": ["A01:2021 - Broken Access Control"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "yaml": [{"file_path": "../yaml/kubernetes/security/seccomp-confinement-disabled.yaml", "description": "Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/seccomp-confinement-disabled.yaml", "metadata": {"cwe": ["CWE-284: Improper Access Control"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"], "category": "security", "technology": ["kubernetes"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/seccomp-confinement-disabled.yaml", "description": "Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/seccomp-confinement-disabled.yaml", "metadata": {"cwe": ["CWE-284: Improper Access Control"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"], "category": "security", "technology": ["kubernetes"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "generic": [{"file_path": "../generic/nginx/security/dynamic-proxy-host.yaml", "description": "The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/nginx/security/dynamic-proxy-host.yaml", "metadata": {"source-rule-url": "https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md", "references": ["https://nginx.org/en/docs/http/ngx_http_map_module.html"], "category": "security", "technology": ["nginx"], "confidence": "MEDIUM", "cwe": ["CWE-441: Unintended Proxy or Intermediary ('Confused Deputy')"], "owasp": ["A01:2021 - Broken Access Control"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/dotnet/security/audit/missing-or-broken-authorization.yaml", "description": "Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/audit/missing-or-broken-authorization.yaml", "metadata": {"likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-862: Missing Authorization"], "cwe2021-top25": true, "cwe2022-top25": true, "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control", "https://cwe.mitre.org/data/definitions/862.html", "https://docs.microsoft.com/en-us/aspnet/core/security/authorization/simple?view=aspnetcore-7.0"], "subcategory": ["vuln"], "technology": [".net", "mvc"]}}, {"file_path": "../csharp/dotnet/security/audit/open-directory-listing.yaml", "description": "An open directory listing is potentially exposed, potentially revealing sensitive information to attackers.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/audit/open-directory-listing.yaml", "metadata": {"likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-548: Exposure of Information Through Directory Listing"], "owasp": ["A06:2017 - Security Misconfiguration", "A01:2021 - Broken Access Control"], "references": ["https://cwe.mitre.org/data/definitions/548.html", "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-7.0#directory-browsing"], "subcategory": ["vuln"], "technology": [".net", "mvc"]}}, {"file_path": "../csharp/lang/security/open-redirect.yaml", "description": "A query string parameter may contain a URL value that could cause the web application to redirect the request to a malicious website controlled by an attacker. Make sure to sanitize this parameter sufficiently.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/open-redirect.yaml", "metadata": {"category": "security", "technology": ["csharp"], "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "references": ["https://cwe.mitre.org/data/definitions/601.html"], "owasp": ["A01:2021 - Broken Access Control"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../csharp/lang/security/filesystem/unsafe-path-combine.yaml", "description": "String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/filesystem/unsafe-path-combine.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "references": ["https://www.praetorian.com/blog/pathcombine-security-issues-in-aspnet-applications/", "https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-6.0#remarks"], "technology": [".net"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../csharp/lang/security/filesystem/unsafe-path-combine.yaml", "description": "String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/filesystem/unsafe-path-combine.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "references": ["https://www.praetorian.com/blog/pathcombine-security-issues-in-aspnet-applications/", "https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-6.0#remarks"], "technology": [".net"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/require-request.yaml", "description": "If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/require-request.yaml", "metadata": {"interfile": true, "owasp": ["A01:2021 - Broken Access Control"], "cwe": ["CWE-706: Use of Incorrectly-Resolved Name or Reference"], "source-rule-url": "https://nodesecroadmap.fyi/chapter-1/threat-UIR.html", "category": "security", "technology": ["express"], "references": ["https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/audit/express-check-directory-listing.yaml", "description": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-check-directory-listing.yaml", "metadata": {"interfile": true, "cwe": ["CWE-548: Exposure of Information Through Directory Listing"], "owasp": ["A06:2017 - Security Misconfiguration", "A01:2021 - Broken Access Control"], "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/serve-index", "https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/audit/express-path-join-resolve-traversal.yaml", "description": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-path-join-resolve-traversal.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "category": "security", "references": ["https://owasp.org/www-community/attacks/Path_Traversal"], "technology": ["express", "node.js"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/audit/express-path-join-resolve-traversal.yaml", "description": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-path-join-resolve-traversal.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "category": "security", "references": ["https://owasp.org/www-community/attacks/Path_Traversal"], "technology": ["express", "node.js"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/audit/res-render-injection.yaml", "description": "User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/res-render-injection.yaml", "metadata": {"interfile": true, "owasp": ["A01:2021 - Broken Access Control"], "cwe": ["CWE-706: Use of Incorrectly-Resolved Name or Reference"], "category": "security", "technology": ["express"], "references": ["http://expressjs.com/en/4x/api.html#res.render"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/lang/security/insecure-object-assign.yaml", "description": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/insecure-object-assign.yaml", "metadata": {"cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html", "https://en.wikipedia.org/wiki/Mass_assignment_vulnerability"], "category": "security", "technology": ["javascript"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../javascript/browser/security/open-redirect.yaml", "description": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/browser/security/open-redirect.yaml", "metadata": {"interfile": true, "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "owasp": ["A01:2021 - Broken Access Control"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.1 Insecue Redirect", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation", "version": "4"}, "category": "security", "confidence": "HIGH", "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"], "technology": ["browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../javascript/browser/security/open-redirect-from-function.yaml", "description": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/browser/security/open-redirect-from-function.yaml", "metadata": {"confidence": "LOW", "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "owasp": ["A01:2021 - Broken Access Control"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.1 Insecue Redirect", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation", "version": "4"}, "category": "security", "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"], "technology": ["browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/rails/security/brakeman/check-validation-regex.yaml", "description": "$V Found an incorrectly-bounded regex passed to `validates_format_of` or `validate ... format => ...`. Ruby regex behavior is multiline by default and lines should be terminated by `\\A` for beginning of line and `\\Z` for end of line, respectively.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-validation-regex.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_validation_regex.rb", "category": "security", "cwe": ["CWE-185: Incorrect Regular Expression"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "technology": ["ruby", "rails"], "references": ["https://brakemanscanner.org/docs/warning_types/format_validation/", "https://github.com/presidentbeef/brakeman/blob/aef6253a8b7bcb97116f2af1ed2a561a6ae35bd5/test/apps/rails3/app/models/account.rb", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/account.rb"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-validation-regex.yaml", "description": "$V Found an incorrectly-bounded regex passed to `validates_format_of` or `validate ... format => ...`. Ruby regex behavior is multiline by default and lines should be terminated by `\\A` for beginning of line and `\\Z` for end of line, respectively.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-validation-regex.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_validation_regex.rb", "category": "security", "cwe": ["CWE-185: Incorrect Regular Expression"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "technology": ["ruby", "rails"], "references": ["https://brakemanscanner.org/docs/warning_types/format_validation/", "https://github.com/presidentbeef/brakeman/blob/aef6253a8b7bcb97116f2af1ed2a561a6ae35bd5/test/apps/rails3/app/models/account.rb", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/account.rb"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-dynamic-render-local-file-include.yaml", "description": "Found request parameters in a call to `render` in a dynamic context. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-dynamic-render-local-file-include.yaml", "metadata": {"technology": ["ruby", "rails"], "category": "security", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb", "references": ["https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion", "https://github.com/presidentbeef/brakeman/blob/f74cb53ead47f0af821d98b5b41e16d63100c240/test/apps/rails2/app/views/home/test_render.html.erb"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-dynamic-render-local-file-include.yaml", "description": "Found request parameters in a call to `render` in a dynamic context. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-dynamic-render-local-file-include.yaml", "metadata": {"technology": ["ruby", "rails"], "category": "security", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb", "references": ["https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion", "https://github.com/presidentbeef/brakeman/blob/f74cb53ead47f0af821d98b5b41e16d63100c240/test/apps/rails2/app/views/home/test_render.html.erb"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-secrets.yaml", "description": "Found a Brakeman-style secret - a variable with the name password/secret/api_key/rest_auth_site_key and a non-empty string literal value.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-secrets.yaml", "metadata": {"technology": ["ruby", "rails"], "category": "security", "cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "owasp": ["A01:2021 - Broken Access Control"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_secrets.rb", "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html", "https://github.com/presidentbeef/brakeman/blob/3f5d5d5f00864cdf7769c50f5bd26f1769a4ba75/test/apps/rails3.1/app/controllers/users_controller.rb"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-rails-session-secret-handling.yaml", "description": "Found a string literal assignment to a Rails session secret `$KEY`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-rails-session-secret-handling.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_session_settings.rb", "category": "security", "cwe": ["CWE-540: Inclusion of Sensitive Information in Source Code"], "owasp": ["A01:2021 - Broken Access Control"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails4_with_engines/config/initializers/secret_token.rb", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3/config/initializers/secret_token.rb"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-before-filter.yaml", "description": "Disabled-by-default Rails controller checks make it much easier to introduce access control mistakes. Prefer an allowlist approach with `:only => [...]` rather than `except: => [...]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-before-filter.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_skip_before_filter.rb", "category": "security", "cwe": ["CWE-284: Improper Access Control"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-before-filter.yaml", "description": "Disabled-by-default Rails controller checks make it much easier to introduce access control mistakes. Prefer an allowlist approach with `:only => [...]` rather than `except: => [...]`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-before-filter.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_skip_before_filter.rb", "category": "security", "cwe": ["CWE-284: Improper Access Control"], "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-redirect-to.yaml", "description": "Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to` without the `:only_path => true` hash value.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-redirect-to.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_redirect.rb", "category": "security", "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "technology": ["ruby", "rails"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"], "owasp": ["A01:2021 - Broken Access Control"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/avoid-session-manipulation.yaml", "description": "This gets data from session using user inputs. A malicious user may be able to retrieve information from your session that you didn't intend them to. Do not use user input as a session key.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/avoid-session-manipulation.yaml", "metadata": {"shortDescription": "Allowing an attacker to manipulate the session may lead to unintended behavior.", "tags": ["security"], "owasp": ["A01:2021 - Broken Access Control"], "cwe": ["CWE-276: Incorrect Default Permissions"], "references": ["https://brakemanscanner.org/docs/warning_types/session_manipulation/"], "category": "security", "technology": ["rails"], "help": "## Remediation\nSession manipulation can occur when an application allows user-input in session keys. Since sessions are typically considered a source of truth (e.g. to check the logged-in user or to match CSRF tokens), allowing an attacker to manipulate the session may lead to unintended behavior.\n\n## References\n[Session Manipulation](https://brakemanscanner.org/docs/warning_types/session_manipulation/)\n", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/avoid-tainted-ftp-call.yaml", "description": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/avoid-tainted-ftp-call.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/avoid-tainted-ftp-call.yaml", "description": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/avoid-tainted-ftp-call.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/avoid-tainted-file-access.yaml", "description": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/avoid-tainted-file-access.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/avoid-tainted-file-access.yaml", "description": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/avoid-tainted-file-access.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/xss/avoid-render-dynamic-path.yaml", "description": "Avoid rendering user input. It may be possible for a malicious user to input a path that lets them access a template they shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure it's an allowed template.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/xss/avoid-render-dynamic-path.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "references": ["https://brakemanscanner.org/docs/warning_types/dynamic_render_paths/"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/xss/avoid-render-dynamic-path.yaml", "description": "Avoid rendering user input. It may be possible for a malicious user to input a path that lets them access a template they shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure it's an allowed template.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/xss/avoid-render-dynamic-path.yaml", "metadata": {"owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "references": ["https://brakemanscanner.org/docs/warning_types/dynamic_render_paths/"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/xss/avoid-redirect.yaml", "description": "When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/xss/avoid-redirect.yaml", "metadata": {"owasp": ["A01:2021 - Broken Access Control"], "cwe": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"], "references": ["https://brakemanscanner.org/docs/warning_types/redirect/"], "category": "security", "technology": ["rails"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A10:2021 - Server-Side Request Forgery (SSRF)": {"terraform": [{"file_path": "../terraform/lang/security/ec2-imdsv1-optional.yaml", "description": "AWS EC2 Instance allowing use of the IMDSv1", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/lang/security/ec2-imdsv1-optional.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "references": ["https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options"], "category": "security", "technology": ["terraform", "aws"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "go": [{"file_path": "../go/lang/security/injection/tainted-url-host.yaml", "description": "A request was found to be crafted from user-input `$REQUEST`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://goteleport.com/blog/ssrf-attacks/"], "category": "security", "technology": ["go"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "interfile": true}}], "python": [{"file_path": "../python/flask/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["flask"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["flask"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "LOW"}}], "java": [{"file_path": "../java/spring/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["java", "spring"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}], "php": [{"file_path": "../php/lang/security/injection/tainted-url-host.yaml", "description": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-url-host.yaml", "metadata": {"cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["php"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/injection/tainted-filename.yaml", "description": "File name based on user input risks server-side request forgery.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-filename.yaml", "metadata": {"technology": ["php"], "category": "security", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/express-phantom-injection.yaml", "description": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-phantom-injection.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "category": "security", "technology": ["express"], "references": ["https://phantomjs.org/page-automation.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-wkhtml-injection.yaml", "description": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-wkhtml-injection.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/wkhtmltopdf"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../javascript/express/security/express-wkhtml-injection.yaml", "description": "If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-wkhtml-injection.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/wkhtmltopdf"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../javascript/express/security/express-puppeteer-injection.yaml", "description": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-puppeteer-injection.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "category": "security", "technology": ["express"], "references": ["https://pptr.dev/api/puppeteer.page"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/chrome-remote-interface/security/audit/chrome-remote-interface-compilescript-injection.yaml", "description": "If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/chrome-remote-interface/security/audit/chrome-remote-interface-compilescript-injection.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "category": "security", "technology": ["chrome-remote-interface"], "references": ["https://github.com/cyrus-and/chrome-remote-interface"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/rails/security/audit/avoid-tainted-http-request.yaml", "description": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/avoid-tainted-http-request.yaml", "metadata": {"owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}]}, "A6: Security Misconfiguration": {"terraform": [{"file_path": "../terraform/aws/security/aws-sqs-queue-policy-wildcard-principal.yaml", "description": "Wildcard used in your SQS queue policy principal. This grants access to all users, including anonymous users (public access). Unless you explicitly require anyone on the internet to be able to read or write to your queue, limit principals, actions and resources to what you need according to least privilege.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-sqs-queue-policy-wildcard-principal.yaml", "metadata": {"category": "security", "technology": ["aws", "terraform"], "owasp": ["A05:2021 - Security Misconfiguration"], "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "references": ["https://cwe.mitre.org/data/definitions/732.html", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue", "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue_policy", "https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-security-best-practices.html"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "rule-origin-note": "published from /src/aws-sqs-queue-policy-wildcard-principal.yml in None"}}, {"file_path": "../terraform/aws/security/aws-ecr-repository-wildcard-principal.yaml", "description": "Detected wildcard access granted in your ECR repository policy principal. This grants access to all users, including anonymous users (public access). Instead, limit principals, actions and resources to what you need according to least privilege.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-ecr-repository-wildcard-principal.yaml", "metadata": {"category": "security", "technology": ["aws", "terraform"], "owasp": ["A05:2021 - Security Misconfiguration"], "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "references": ["https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository_policy", "https://docs.aws.amazon.com/lambda/latest/operatorguide/wildcard-permissions-iam.html", "https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/monitor-amazon-ecr-repositories-for-wildcard-permissions-using-aws-cloudformation-and-aws-config.html", "https://cwe.mitre.org/data/definitions/732.html"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]"}}, {"file_path": "../terraform/aws/security/wildcard-assume-role.yaml", "description": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/wildcard-assume-role.yaml", "metadata": {"cwe": ["CWE-250: Execution with Unnecessary Privileges"], "category": "security", "technology": ["aws"], "references": ["https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/"], "owasp": ["A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/wildcard-assume-role.yaml", "description": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/wildcard-assume-role.yaml", "metadata": {"cwe": ["CWE-250: Execution with Unnecessary Privileges"], "category": "security", "technology": ["aws"], "references": ["https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/"], "owasp": ["A06:2017 - Security Misconfiguration", "A05:2021 - Security Misconfiguration"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-iam-admin-policy-ssoadmin.yaml", "description": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-iam-admin-policy-ssoadmin.yaml", "metadata": {"category": "security", "technology": ["aws"], "owasp": ["A05:2021 - Security Misconfiguration"], "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "references": ["https://cwe.mitre.org/data/definitions/732.html"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-iam-admin-policy.yaml", "description": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-iam-admin-policy.yaml", "metadata": {"category": "security", "technology": ["aws", "terraform"], "owasp": ["A05:2021 - Security Misconfiguration"], "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "references": ["https://cwe.mitre.org/data/definitions/732.html"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-kms-key-wildcard-principal.yaml", "description": "Detected wildcard access granted in your KMS key. This means anyone with this policy can perform administrative actions over the keys. Instead, limit principals, actions and resources to what you need according to least privilege.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-kms-key-wildcard-principal.yaml", "metadata": {"category": "security", "technology": ["aws", "terraform"], "owasp": ["A05:2021 - Security Misconfiguration"], "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "references": ["https://cwe.mitre.org/data/definitions/732.html"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../terraform/aws/security/aws-glacier-vault-any-principal.yaml", "description": "Detected wildcard access granted to Glacier Vault. This means anyone within your AWS account ID can perform actions on Glacier resources. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:<identity>`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/terraform/aws/security/aws-glacier-vault-any-principal.yaml", "metadata": {"category": "security", "technology": ["aws"], "owasp": ["A05:2021 - Security Misconfiguration"], "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "references": ["https://cwe.mitre.org/data/definitions/732.html"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "go": [{"file_path": "../go/lang/security/audit/net/fs-directory-listing.yaml", "description": "Detected usage of 'http.FileServer' as handler: this allows directory listing and an attacker could navigate through directories looking for sensitive files. Be sure to disable directory listing or restrict access to specific directories/files.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/net/fs-directory-listing.yaml", "metadata": {"category": "security", "cwe": ["CWE-548: Exposure of Information Through Directory Listing"], "owasp": ["A06:2017 - Security Misconfiguration", "A01:2021 - Broken Access Control"], "references": ["https://github.com/OWASP/Go-SCP", "https://cwe.mitre.org/data/definitions/548.html"], "confidence": "MEDIUM", "technology": ["go"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "python": [{"file_path": "../python/lang/security/use-defused-xml.yaml", "description": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/use-defused-xml.yaml", "metadata": {"owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "references": ["https://docs.python.org/3/library/xml.html", "https://github.com/tiran/defusedxml", "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"], "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "yaml": [{"file_path": "../yaml/kubernetes/security/allow-privilege-escalation-true.yaml", "description": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/allow-privilege-escalation-true.yaml", "metadata": {"cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "category": "security", "technology": ["kubernetes"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/allow-privilege-escalation-true.yaml", "description": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/allow-privilege-escalation-true.yaml", "metadata": {"cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "category": "security", "technology": ["kubernetes"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/run-as-non-root-container-level-missing-security-context.test.yaml", "description": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/run-as-non-root-container-level-missing-security-context.test.yaml", "metadata": {"cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "category": "security", "technology": ["kubernetes"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/run-as-non-root-container-level-missing-security-context.test.yaml", "description": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/run-as-non-root-container-level-missing-security-context.test.yaml", "metadata": {"cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "category": "security", "technology": ["kubernetes"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/allow-privilege-escalation-no-securitycontext.yaml", "description": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  By adding a `securityContext` to your Kubernetes pod, you can help to  ensure that your containerized applications are more secure and less  vulnerable to privilege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/allow-privilege-escalation-no-securitycontext.yaml", "metadata": {"cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "category": "security", "technology": ["kubernetes"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/allow-privilege-escalation-no-securitycontext.yaml", "description": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  By adding a `securityContext` to your Kubernetes pod, you can help to  ensure that your containerized applications are more secure and less  vulnerable to privilege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/allow-privilege-escalation-no-securitycontext.yaml", "metadata": {"cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "category": "security", "technology": ["kubernetes"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/allow-privilege-escalation.yaml", "description": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  By adding the `allowPrivilegeEscalation` parameter to your the  `securityContext`, you can help to  ensure that your containerized applications are more secure and less  vulnerable to privilege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/allow-privilege-escalation.yaml", "metadata": {"cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "category": "security", "technology": ["kubernetes"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/kubernetes/security/allow-privilege-escalation.yaml", "description": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  By adding the `allowPrivilegeEscalation` parameter to your the  `securityContext`, you can help to  ensure that your containerized applications are more secure and less  vulnerable to privilege escalation attacks.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/kubernetes/security/allow-privilege-escalation.yaml", "metadata": {"cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation", "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "category": "security", "technology": ["kubernetes"], "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../yaml/github-actions/security/allowed-unsecure-commands.yaml", "description": "The environment variable `ACTIONS_ALLOW_UNSECURE_COMMANDS` grants this workflow permissions to use the `set-env` and `add-path` commands. There is a vulnerability in these commands that could result in environment variables being modified by an attacker. Depending on the use of the environment variable, this could enable an attacker to, at worst, modify the system path to run a different command than intended, resulting in arbitrary code execution. This could result in stolen code or secrets. Don't use `ACTIONS_ALLOW_UNSECURE_COMMANDS`. Instead, use Environment Files. See https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files for more information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/github-actions/security/allowed-unsecure-commands.yaml", "metadata": {"cwe": ["CWE-749: Exposed Dangerous Method or Function"], "owasp": "A06:2017 - Security Misconfiguration", "references": ["https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/", "https://github.com/actions/toolkit/security/advisories/GHSA-mfwh-5m23-j46w", "https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files"], "category": "security", "technology": ["github-actions"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/dotnet/security/audit/open-directory-listing.yaml", "description": "An open directory listing is potentially exposed, potentially revealing sensitive information to attackers.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/audit/open-directory-listing.yaml", "metadata": {"likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-548: Exposure of Information Through Directory Listing"], "owasp": ["A06:2017 - Security Misconfiguration", "A01:2021 - Broken Access Control"], "references": ["https://cwe.mitre.org/data/definitions/548.html", "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-7.0#directory-browsing"], "subcategory": ["vuln"], "technology": [".net", "mvc"]}}, {"file_path": "../csharp/lang/security/xxe/xmldocument-unsafe-parser-override.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmldocument-unsafe-parser-override.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}, {"file_path": "../csharp/lang/security/xxe/xmlreadersettings-unsafe-parser-override.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmlreadersettings-unsafe-parser-override.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}, {"file_path": "../csharp/lang/security/xxe/xmltextreader-unsafe-defaults.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmltextreader-unsafe-defaults.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/express-xml2json-xxe.yaml", "description": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-xml2json-xxe.yaml", "metadata": {"owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/xml2json"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-expat-xxe.yaml", "description": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-expat-xxe.yaml", "metadata": {"interfile": true, "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://github.com/astro/node-expat"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/audit/express-check-directory-listing.yaml", "description": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/express-check-directory-listing.yaml", "metadata": {"interfile": true, "cwe": ["CWE-548: Exposure of Information Through Directory Listing"], "owasp": ["A06:2017 - Security Misconfiguration", "A01:2021 - Broken Access Control"], "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/serve-index", "https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A1: Injection": {"go": [{"file_path": "../go/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/aws-lambda/security/database-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/aws-lambda/security/database-sqli.yaml", "metadata": {"references": ["https://pkg.go.dev/database/sql#DB.Query"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "database", "sql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/aws-lambda/security/database-sqli.yaml", "description": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/aws-lambda/security/database-sqli.yaml", "metadata": {"references": ["https://pkg.go.dev/database/sql#DB.Query"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "database", "sql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/net/wip-xss-using-responsewriter-and-printf.yaml", "description": "Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/net/wip-xss-using-responsewriter-and-printf.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/net/formatted-template-string.yaml", "description": "Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/net/formatted-template-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://golang.org/pkg/html/template/#HTML"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://golang.org/doc/database/sql-injection", "https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/"], "category": "security", "technology": ["go"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://golang.org/doc/database/sql-injection", "https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/"], "category": "security", "technology": ["go"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "interfile": true}}, {"file_path": "../go/lang/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["go"], "references": ["https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "python": [{"file_path": "../python/flask/security/audit/directly-returned-format-string.yaml", "description": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/audit/directly-returned-format-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["flask"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/raw-html-concat.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/raw-html-concat.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["flask"], "references": ["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "category": "security", "technology": ["sqlalchemy", "flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "category": "security", "technology": ["sqlalchemy", "flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/user-eval.yaml", "description": "Detected user data flowing into eval. This is code injection and should be avoided.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/user-eval.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html"], "category": "security", "technology": ["flask"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/csv-writer-injection.yaml", "description": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/csv-writer-injection.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1236: Improper Neutralization of Formula Elements in a CSV File"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/raphaelm/defusedcsv", "https://owasp.org/www-community/attacks/CSV_Injection", "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"], "technology": ["python", "flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/csv-writer-injection.yaml", "description": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/csv-writer-injection.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1236: Improper Neutralization of Formula Elements in a CSV File"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/raphaelm/defusedcsv", "https://owasp.org/www-community/attacks/CSV_Injection", "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"], "technology": ["python", "flask"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/subprocess-injection.yaml", "description": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/subprocess-injection.yaml", "metadata": {"category": "security", "technology": ["flask"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/subprocess-injection.yaml", "description": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/subprocess-injection.yaml", "metadata": {"category": "security", "technology": ["flask"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../python/jinja2/security/audit/autoescape-disabled-false.yaml", "description": "Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/jinja2/security/audit/autoescape-disabled-false.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html", "cwe": ["CWE-116: Improper Encoding or Escaping of Output"], "owasp": ["A03:2021 - Injection"], "references": ["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"], "category": "security", "technology": ["jinja2"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/jinja2/security/audit/missing-autoescape-disabled.yaml", "description": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/jinja2/security/audit/missing-autoescape-disabled.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html", "cwe": ["CWE-116: Improper Encoding or Escaping of Output"], "owasp": ["A03:2021 - Injection"], "references": ["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"], "category": "security", "technology": ["jinja2"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pyramid/security/direct-use-of-response.yaml", "description": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pyramid/security/direct-use-of-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["pyramid"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/pymssql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/pymssql-sqli.yaml", "metadata": {"references": ["https://pypi.org/project/pymssql/"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "pymssql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/pymssql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/pymssql-sqli.yaml", "metadata": {"references": ["https://pypi.org/project/pymssql/"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "pymssql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/mysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/mysql-sqli.yaml", "metadata": {"references": ["https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html", "https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/mysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/mysql-sqli.yaml", "metadata": {"references": ["https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html", "https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "mysql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dynamodb-filter-injection.yaml", "description": "Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dynamodb-filter-injection.yaml", "metadata": {"cwe": ["CWE-943: Improper Neutralization of Special Elements in Data Query Logic"], "owasp": ["A01:2017 - Injection"], "category": "security", "technology": ["python", "boto3", "aws-lambda", "dynamodb"], "references": ["https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-system-call.yaml", "description": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-system-call.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-system-call.yaml", "description": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-system-call.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-shell.yaml", "description": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-shell.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-shell.yaml", "description": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-shell.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-html-response.yaml", "description": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-html-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/pymysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/pymysql-sqli.yaml", "metadata": {"references": ["https://pypi.org/project/PyMySQL/#id4"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "pymysql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/pymysql-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/pymysql-sqli.yaml", "metadata": {"references": ["https://pypi.org/project/PyMySQL/#id4"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "pymysql"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-subprocess-use.yaml", "description": "Detected subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-subprocess-use.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-subprocess-use.yaml", "description": "Detected subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-subprocess-use.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-code-exec.yaml", "description": "Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-code-exec.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "version": "4"}, "category": "security", "technology": ["python"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-spawn-process.yaml", "description": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-spawn-process.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-spawn-process.yaml", "description": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-spawn-process.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/sqlalchemy-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/sqlalchemy-sqli.yaml", "metadata": {"references": ["https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sqlalchemy"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/sqlalchemy-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/sqlalchemy-sqli.yaml", "metadata": {"references": ["https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "sqlalchemy"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-create-exec.yaml", "description": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-create-exec.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-create-exec.yaml", "description": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-create-exec.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-exec.yaml", "description": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-exec.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/dangerous-asyncio-exec.yaml", "description": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/dangerous-asyncio-exec.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec", "https://docs.python.org/3/library/shlex.html"], "category": "security", "technology": ["python", "aws-lambda"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/psycopg-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/psycopg-sqli.yaml", "metadata": {"references": ["https://www.psycopg.org/docs/cursor.html#cursor.execute", "https://www.psycopg.org/docs/cursor.html#cursor.executemany", "https://www.psycopg.org/docs/cursor.html#cursor.mogrify"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "psycopg", "psycopg2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/psycopg-sqli.yaml", "description": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/psycopg-sqli.yaml", "metadata": {"references": ["https://www.psycopg.org/docs/cursor.html#cursor.execute", "https://www.psycopg.org/docs/cursor.html#cursor.executemany", "https://www.psycopg.org/docs/cursor.html#cursor.mogrify"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda", "psycopg", "psycopg2"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-os-exec.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-os-exec.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "confidence": "MEDIUM", "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-os-exec.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-os-exec.yaml", "metadata": {"cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "confidence": "MEDIUM", "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-spawn-process.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-spawn-process.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/lang/security/dangerous-spawn-process.yaml", "description": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/dangerous-spawn-process.yaml", "metadata": {"source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/dangerous-subprocess-use-tainted-env-args.yaml", "description": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-subprocess-use-tainted-env-args.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/lang/security/audit/dangerous-subprocess-use-tainted-env-args.yaml", "description": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/dangerous-subprocess-use-tainted-env-args.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "category": "security", "technology": ["python"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../python/django/security/injection/reflected-data-httpresponse.yaml", "description": "Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/reflected-data-httpresponse.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/reflected-data-httpresponsebadrequest.yaml", "description": "Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/reflected-data-httpresponsebadrequest.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/csv-writer-injection.yaml", "description": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/csv-writer-injection.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1236: Improper Neutralization of Formula Elements in a CSV File"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/raphaelm/defusedcsv", "https://owasp.org/www-community/attacks/CSV_Injection", "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"], "technology": ["django", "python"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM"}}, {"file_path": "../python/django/security/injection/csv-writer-injection.yaml", "description": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/csv-writer-injection.yaml", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1236: Improper Neutralization of Formula Elements in a CSV File"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/raphaelm/defusedcsv", "https://owasp.org/www-community/attacks/CSV_Injection", "https://web.archive.org/web/20220516052229/https://www.contextis.com/us/blog/comma-separated-vulnerabilities"], "technology": ["django", "python"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM"}}, {"file_path": "../python/django/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["django"], "references": ["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render", "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/request-data-write.yaml", "description": "Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/request-data-write.yaml", "metadata": {"cwe": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp": ["A03:2021 - Injection"], "category": "security", "technology": ["django"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/email/xss-send-mail-html-message.yaml", "description": "Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/email/xss-send-mail-html-message.yaml", "metadata": {"cwe": ["CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://www.damonkohler.com/2008/12/email-injection.html"], "category": "security", "technology": ["django"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/email/xss-html-email-body.yaml", "description": "Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/email/xss-html-email-body.yaml", "metadata": {"cwe": ["CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://www.damonkohler.com/2008/12/email-injection.html"], "category": "security", "technology": ["django"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "typescript": [{"file_path": "../typescript/angular/security/audit/angular-domsanitizer.yaml", "description": "Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/angular/security/audit/angular-domsanitizer.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://angular.io/api/platform-browser/DomSanitizer", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "confidence": "MEDIUM", "category": "security", "technology": ["angular", "browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../typescript/react/security/audit/react-dangerouslysetinnerhtml.yaml", "description": "Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/react/security/audit/react-dangerouslysetinnerhtml.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html"], "category": "security", "confidence": "MEDIUM", "technology": ["react"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../typescript/react/security/audit/react-unsanitized-method.yaml", "description": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/react/security/audit/react-unsanitized-method.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln", "https://developer.mozilla.org/en-US/docs/Web/API/Document/write", "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML"], "category": "security", "confidence": "MEDIUM", "technology": ["react"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../typescript/react/security/audit/react-unsanitized-property.yaml", "description": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/react/security/audit/react-unsanitized-property.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html"], "category": "security", "confidence": "MEDIUM", "technology": ["react"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/servletresponse-writer-xss.yaml", "description": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/servletresponse-writer-xss.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/formatted-sql-string.yaml", "description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/formatted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION", "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.5 Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html", "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps", "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/formatted-sql-string.yaml", "description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/formatted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION", "asvs": {"section": "V5: Validation, Sanitization and Encoding Verification Requirements", "control_id": "5.3.5 Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "version": "4"}, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html", "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps", "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/tainted-xpath-from-http-request.yaml", "description": "Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/tainted-xpath-from-http-request.yaml", "metadata": {"category": "security", "technology": ["java"], "cwe": ["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/crlf-injection-logs.yaml", "description": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/crlf-injection-logs.yaml", "metadata": {"cwe": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp": ["A03:2021 - Injection"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/tainted-ldapi-from-http-request.yaml", "description": "Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/tainted-ldapi-from-http-request.yaml", "metadata": {"cwe": ["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/tainted-ldapi-from-http-request.yaml", "description": "Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/tainted-ldapi-from-http-request.yaml", "metadata": {"cwe": ["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/http-response-splitting.yaml", "description": "Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/http-response-splitting.yaml", "metadata": {"cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "owasp": ["A03:2021 - Injection"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#HTTP_RESPONSE_SPLITTING", "references": ["https://www.owasp.org/index.php/HTTP_Response_Splitting"], "category": "security", "technology": ["java"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/tainted-cmd-from-http-request.yaml", "description": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/tainted-cmd-from-http-request.yaml", "metadata": {"category": "security", "technology": ["java"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/tainted-cmd-from-http-request.yaml", "description": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/tainted-cmd-from-http-request.yaml", "metadata": {"category": "security", "technology": ["java"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/xss/no-direct-response-writer.yaml", "description": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xss/no-direct-response-writer.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html"], "subcategory": ["vuln"], "technology": ["java", "servlets"], "interfile": true, "license": "proprietary license - copyright \u00a9 Semgrep, Inc."}}, {"file_path": "../java/spring/security/audit/spring-sqli.yaml", "description": "Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/audit/spring-sqli.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "category": "security", "technology": ["spring"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/spring/security/audit/spring-sqli.yaml", "description": "Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/audit/spring-sqli.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "category": "security", "technology": ["spring"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/spring/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["spring"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/spring/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["spring"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "interfile": true}}, {"file_path": "../java/spring/security/injection/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["java", "spring"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/assert-use.yaml", "description": "Calling assert with user input is equivalent to eval'ing.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/assert-use.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "references": ["https://www.php.net/manual/en/function.assert", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php"], "category": "security", "technology": ["php"], "confidence": "HIGH", "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../php/lang/security/file-inclusion.yaml", "description": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/file-inclusion.yaml", "metadata": {"cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "category": "security", "technology": ["php"], "owasp": ["A03:2021 - Injection"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../php/lang/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "technology": ["php"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/injection/tainted-sql-string.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-sql-string.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "technology": ["php"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/injection/echoed-request.yaml", "description": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/echoed-request.yaml", "metadata": {"technology": ["php"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/en/reserved.variables.request.php", "https://www.php.net/manual/en/reserved.variables.post.php", "https://www.php.net/manual/en/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/lang/security/injection/tainted-object-instantiation.yaml", "description": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/tainted-object-instantiation.yaml", "metadata": {"cwe": ["CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')"], "category": "security", "technology": ["php"], "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/doctrine/security/audit/doctrine-orm-dangerous-query.yaml", "description": "`$QUERY` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/doctrine/security/audit/doctrine-orm-dangerous-query.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection", "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"], "technology": ["doctrine"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/doctrine/security/audit/doctrine-orm-dangerous-query.yaml", "description": "`$QUERY` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/doctrine/security/audit/doctrine-orm-dangerous-query.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection", "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"], "technology": ["doctrine"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-sql-injection.yaml", "description": "Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-sql-injection.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "category": "security", "technology": ["laravel"], "references": ["https://laravel.com/docs/8.x/queries"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-sql-injection.yaml", "description": "Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-sql-injection.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "category": "security", "technology": ["laravel"], "references": ["https://laravel.com/docs/8.x/queries"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-unsafe-validator.yaml", "description": "Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-unsafe-validator.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["php", "laravel"], "references": ["https://laravel.com/docs/9.x/validation#rule-unique"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-unsafe-validator.yaml", "description": "Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-unsafe-validator.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["php", "laravel"], "references": ["https://laravel.com/docs/9.x/validation#rule-unique"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-api-route-sql-injection.yaml", "description": "HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-api-route-sql-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md"], "technology": ["php", "laravel"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../php/laravel/security/laravel-api-route-sql-injection.yaml", "description": "HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/laravel/security/laravel-api-route-sql-injection.yaml", "metadata": {"category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md"], "technology": ["php", "laravel"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "bash": [{"file_path": "../bash/curl/security/curl-eval.yaml", "description": "Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/bash/curl/security/curl-eval.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "category": "security", "technology": ["bash", "curl"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "scala": [{"file_path": "../scala/play/security/tainted-sql-from-http-request.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-sql-from-http-request.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["scala", "play"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../scala/play/security/tainted-sql-from-http-request.yaml", "description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-sql-from-http-request.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"], "category": "security", "technology": ["scala", "play"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../scala/play/security/tainted-html-response.yaml", "description": "Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-html-response.yaml", "metadata": {"category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "technology": ["scala", "play"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../scala/play/security/tainted-slick-sqli.yaml", "description": "Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-slick-sqli.yaml", "metadata": {"references": ["https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values", "https://scala-slick.org/doc/3.2.0/sql-to-slick.html#non-optimal-sql-code"], "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["scala", "slick", "play"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../scala/play/security/tainted-slick-sqli.yaml", "description": "Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-slick-sqli.yaml", "metadata": {"references": ["https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values", "https://scala-slick.org/doc/3.2.0/sql-to-slick.html#non-optimal-sql-code"], "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["scala", "slick", "play"], "confidence": "HIGH", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "yaml": [{"file_path": "../yaml/github-actions/security/workflow-run-target-code-checkout.yaml", "description": "This GitHub Actions workflow file uses `workflow_run` and checks out code from the incoming pull request. When using `workflow_run`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/yaml/github-actions/security/workflow-run-target-code-checkout.yaml", "metadata": {"category": "security", "owasp": "A01:2017 - Injection", "cwe": "CWE-913: Improper Control of Dynamically-Managed Code Resources", "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "subcategory": ["vuln"], "references": ["https://securitylab.github.com/research/github-actions-preventing-pwn-requests/", "https://github.com/justinsteven/advisories/blob/master/2021_github_actions_checkspelling_token_leak_via_advice_symlink.md", "https://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability"], "technology": ["github-actions"]}}], "generic": [{"file_path": "../generic/nginx/security/header-injection.yaml", "description": "The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/generic/nginx/security/header-injection.yaml", "metadata": {"cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "references": ["https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "category": "security", "technology": ["nginx"], "confidence": "MEDIUM", "owasp": ["A03:2021 - Injection"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/dotnet/security/razor-template-injection.yaml", "description": "User-controllable string passed to Razor.Parse. This leads directly to code execution in the context of the process.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/razor-template-injection.yaml", "metadata": {"likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "owasp": ["A03:2021 - Injection"], "references": ["https://clement.notin.org/blog/2020/04/15/Server-Side-Template-Injection-(SSTI)-in-ASP.NET-Razor/"], "subcategory": ["vuln"], "technology": [".net", "razor", "asp"]}}, {"file_path": "../csharp/dotnet/security/audit/xpath-injection.yaml", "description": "XPath queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an XPath Injection exploitation.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/audit/xpath-injection.yaml", "metadata": {"likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection/", "https://cwe.mitre.org/data/definitions/643.html"], "subcategory": ["vuln"], "technology": [".net"]}}, {"file_path": "../csharp/dotnet/security/audit/ldap-injection.yaml", "description": "LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/audit/ldap-injection.yaml", "metadata": {"likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection/", "https://cwe.mitre.org/data/definitions/90", "https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html#safe-c-sharp-net-tba-example"], "subcategory": ["vuln"], "technology": [".net"]}}, {"file_path": "../csharp/dotnet/security/audit/ldap-injection.yaml", "description": "LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/audit/ldap-injection.yaml", "metadata": {"likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection/", "https://cwe.mitre.org/data/definitions/90", "https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html#safe-c-sharp-net-tba-example"], "subcategory": ["vuln"], "technology": [".net"]}}, {"file_path": "../csharp/lang/security/regular-expression-dos/regular-expression-dos.yaml", "description": "An attacker can then cause a program using a regular expression to enter these extreme situations and then hang for a very long time.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/regular-expression-dos/regular-expression-dos.yaml", "metadata": {"cwe": ["CWE-1333: Inefficient Regular Expression Complexity"], "owasp": "A01:2017 - Injection", "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS", "https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions#regular-expression-examples"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../csharp/lang/security/regular-expression-dos/regular-expression-dos-infinite-timeout.yaml", "description": "Specifying the regex timeout leaves the system vulnerable to a regex-based Denial of Service (DoS) attack. Consider setting the timeout to a short amount of time like 2 or 3 seconds. If you are sure you need an infinite timeout, double check that your context meets the conditions outlined in the \"Notes to Callers\" section at the bottom of this page: https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/regular-expression-dos/regular-expression-dos-infinite-timeout.yaml", "metadata": {"cwe": ["CWE-1333: Inefficient Regular Expression Complexity"], "owasp": "A01:2017 - Injection", "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS", "https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.infinitematchtimeout", "https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0"], "category": "security", "technology": [".net"], "confidence": "MEDIUM", "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/express-vm2-injection.yaml", "description": "Make sure that unverified user data can not reach `vm2`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-vm2-injection.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-vm-injection.yaml", "description": "Make sure that unverified user data can not reach `$VM`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-vm-injection.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-insecure-template-usage.yaml", "description": "User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-insecure-template-usage.yaml", "metadata": {"interfile": true, "category": "security", "cwe": ["CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine"], "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "technology": ["javascript", "typescript", "express", "pug", "jade", "dot", "ejs", "nunjucks", "lodash", "handlbars", "mustache", "hogan.js", "eta", "squirrelly"], "source_rule_url": ["https://github.com/github/codeql/blob/2ba2642c7ab29b9eedef33bcc2b8cd1d203d0c10/javascript/ql/test/query-tests/Security/CWE-094/CodeInjection/template-sinks.js"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-insecure-template-usage.yaml", "description": "User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-insecure-template-usage.yaml", "metadata": {"interfile": true, "category": "security", "cwe": ["CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine"], "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "technology": ["javascript", "typescript", "express", "pug", "jade", "dot", "ejs", "nunjucks", "lodash", "handlbars", "mustache", "hogan.js", "eta", "squirrelly"], "source_rule_url": ["https://github.com/github/codeql/blob/2ba2642c7ab29b9eedef33bcc2b8cd1d203d0c10/javascript/ql/test/query-tests/Security/CWE-094/CodeInjection/template-sinks.js"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-sandbox-injection.yaml", "description": "Make sure that unverified user data can not reach `sandbox`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-sandbox-injection.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html"], "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/audit/xss/direct-response-write.yaml", "description": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/xss/direct-response-write.yaml", "metadata": {"interfile": true, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/injection/tainted-sql-string.yaml", "metadata": {"owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "technology": ["express"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/injection/raw-html-format.yaml", "description": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-element-taint.yaml", "description": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-element-taint.yaml", "metadata": {"confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://docs.angularjs.org/api/ng/function/angular.element", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "technology": ["angularjs"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-trust-as-method.yaml", "description": "The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-trust-as-method.yaml", "metadata": {"references": ["https://docs.angularjs.org/api/ng/service/$sce", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "technology": ["angular"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-element-methods.yaml", "description": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-element-methods.yaml", "metadata": {"confidence": "LOW", "references": ["https://docs.angularjs.org/api/ng/function/angular.element", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "technology": ["angularjs"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-sql-string.yaml", "metadata": {"references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/tainted-html-response.yaml", "description": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-html-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/vm-runincontext-injection.yaml", "description": "The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/vm-runincontext-injection.yaml", "metadata": {"owasp": ["A03:2021 - Injection"], "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "category": "security", "technology": ["javascript", "aws-lambda"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/lang/security/detect-eval-with-expression.yaml", "description": "Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/detect-eval-with-expression.yaml", "metadata": {"cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "owasp": ["A03:2021 - Injection"], "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js", "references": ["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!"], "category": "security", "technology": ["javascript"], "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/lang/security/audit/sqli/node-knex-sqli.yaml", "description": "Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/audit/sqli/node-knex-sqli.yaml", "metadata": {"confidence": "MEDIUM", "references": ["https://knexjs.org/#Builder-fromRaw", "https://knexjs.org/#Builder-whereRaw", "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["express", "nodejs", "knex"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../javascript/lang/security/audit/sqli/node-knex-sqli.yaml", "description": "Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/lang/security/audit/sqli/node-knex-sqli.yaml", "metadata": {"confidence": "MEDIUM", "references": ["https://knexjs.org/#Builder-fromRaw", "https://knexjs.org/#Builder-whereRaw", "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html"], "category": "security", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "technology": ["express", "nodejs", "knex"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../javascript/browser/security/raw-html-concat.yaml", "description": "User controlled data in a HTML string may result in XSS", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/browser/security/raw-html-concat.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/xss/"], "category": "security", "technology": ["browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/lang/security/no-eval.yaml", "description": "Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/lang/security/no-eval.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe2022-top25": true, "cwe2021-top25": true, "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_evaluation.rb", "subcategory": ["vuln"], "technology": ["ruby", "rails"]}}, {"file_path": "../ruby/rails/security/brakeman/check-sql.yaml", "description": "Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-sql.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_sql.rb", "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-sql.yaml", "description": "Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-sql.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_sql.rb", "category": "security", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "technology": ["ruby", "rails"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection", "https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-unsafe-reflection-methods.yaml", "description": "Found user-controllable input to a reflection method. This may allow a user to alter program behavior and potentially execute arbitrary instructions in the context of the process. Do not provide arbitrary user input to `tap`, `method`, or `to_proc`", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-unsafe-reflection-methods.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection_methods.rb", "category": "security", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "technology": ["ruby", "rails"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/groups_controller.rb"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/brakeman/check-unsafe-reflection.yaml", "description": "Found user-controllable input to Ruby reflection functionality. This allows a remote user to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable input.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/brakeman/check-unsafe-reflection.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection.rb", "category": "security", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "owasp": ["A03:2021 - Injection"], "technology": ["ruby", "rails"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails2/app/controllers/application_controller.rb"], "cwe2022-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/avoid-tainted-shell-call.yaml", "description": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/avoid-tainted-shell-call.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/avoid-tainted-shell-call.yaml", "description": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/avoid-tainted-shell-call.yaml", "metadata": {"owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "references": ["https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/sqli/ruby-pg-sqli.yaml", "description": "Detected string concatenation with a non-literal variable in a pg Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])` And you can use prepared statements with `exec_prepared`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/sqli/ruby-pg-sqli.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.rubydoc.info/gems/pg/PG/Connection"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/sqli/ruby-pg-sqli.yaml", "description": "Detected string concatenation with a non-literal variable in a pg Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])` And you can use prepared statements with `exec_prepared`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/sqli/ruby-pg-sqli.yaml", "metadata": {"cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.rubydoc.info/gems/pg/PG/Connection"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/audit/xss/avoid-link-to.yaml", "description": "This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped. This means that user input which reaches the body will be executed when the HTML is rendered. Even in other versions, values starting with `javascript:` or `data:` are not escaped. It is better to create and use a safer function which checks the body argument.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/xss/avoid-link-to.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_link_to.rb", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://brakemanscanner.org/docs/warning_types/link_to/", "https://brakemanscanner.org/docs/warning_types/link_to_href/"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/", "https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A7: Cross-Site Scripting (XSS)": {"go": [{"file_path": "../go/lang/security/audit/net/wip-xss-using-responsewriter-and-printf.yaml", "description": "Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/net/wip-xss-using-responsewriter-and-printf.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/audit/net/formatted-template-string.yaml", "description": "Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/audit/net/formatted-template-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://golang.org/pkg/html/template/#HTML"], "category": "security", "technology": ["go"], "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../go/lang/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/go/lang/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["go"], "references": ["https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "confidence": "MEDIUM", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "python": [{"file_path": "../python/flask/security/audit/directly-returned-format-string.yaml", "description": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/audit/directly-returned-format-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["flask"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/flask/security/injection/raw-html-concat.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/flask/security/injection/raw-html-concat.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["flask"], "references": ["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/pyramid/security/direct-use-of-response.yaml", "description": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/pyramid/security/direct-use-of-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["pyramid"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-html-response.yaml", "description": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-html-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/aws-lambda/security/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/reflected-data-httpresponse.yaml", "description": "Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/reflected-data-httpresponse.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/reflected-data-httpresponsebadrequest.yaml", "description": "Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/reflected-data-httpresponsebadrequest.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["django"], "references": ["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render", "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "typescript": [{"file_path": "../typescript/angular/security/audit/angular-domsanitizer.yaml", "description": "Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/angular/security/audit/angular-domsanitizer.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://angular.io/api/platform-browser/DomSanitizer", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "confidence": "MEDIUM", "category": "security", "technology": ["angular", "browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../typescript/react/security/audit/react-dangerouslysetinnerhtml.yaml", "description": "Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/react/security/audit/react-dangerouslysetinnerhtml.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html"], "category": "security", "confidence": "MEDIUM", "technology": ["react"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}, {"file_path": "../typescript/react/security/audit/react-unsanitized-method.yaml", "description": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/react/security/audit/react-unsanitized-method.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln", "https://developer.mozilla.org/en-US/docs/Web/API/Document/write", "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML"], "category": "security", "confidence": "MEDIUM", "technology": ["react"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../typescript/react/security/audit/react-unsanitized-property.yaml", "description": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/typescript/react/security/audit/react-unsanitized-property.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html"], "category": "security", "confidence": "MEDIUM", "technology": ["react"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/servletresponse-writer-xss.yaml", "description": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/servletresponse-writer-xss.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET", "category": "security", "technology": ["java"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../java/lang/security/audit/xss/no-direct-response-writer.yaml", "description": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/audit/xss/no-direct-response-writer.yaml", "metadata": {"likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html"], "subcategory": ["vuln"], "technology": ["java", "servlets"], "interfile": true, "license": "proprietary license - copyright \u00a9 Semgrep, Inc."}}, {"file_path": "../java/spring/security/injection/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/spring/security/injection/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["java", "spring"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/injection/echoed-request.yaml", "description": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/injection/echoed-request.yaml", "metadata": {"technology": ["php"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/en/reserved.variables.request.php", "https://www.php.net/manual/en/reserved.variables.post.php", "https://www.php.net/manual/en/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "scala": [{"file_path": "../scala/play/security/tainted-html-response.yaml", "description": "Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/scala/play/security/tainted-html-response.yaml", "metadata": {"category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "technology": ["scala", "play"], "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/audit/xss/direct-response-write.yaml", "description": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/audit/xss/direct-response-write.yaml", "metadata": {"interfile": true, "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/injection/tainted-sql-string.yaml", "description": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/injection/tainted-sql-string.yaml", "metadata": {"owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "category": "security", "technology": ["express"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/injection/raw-html-format.yaml", "description": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-element-taint.yaml", "description": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-element-taint.yaml", "metadata": {"confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://docs.angularjs.org/api/ng/function/angular.element", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "technology": ["angularjs"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-trust-as-method.yaml", "description": "The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-trust-as-method.yaml", "metadata": {"references": ["https://docs.angularjs.org/api/ng/service/$sce", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "technology": ["angular"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/angular/security/detect-angular-element-methods.yaml", "description": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/angular/security/detect-angular-element-methods.yaml", "metadata": {"confidence": "LOW", "references": ["https://docs.angularjs.org/api/ng/function/angular.element", "https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf"], "category": "security", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "technology": ["angularjs"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM"}}, {"file_path": "../javascript/aws-lambda/security/tainted-html-response.yaml", "description": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-html-response.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/aws-lambda/security/tainted-html-string.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/aws-lambda/security/tainted-html-string.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A03_2021-Injection"]}}, {"file_path": "../javascript/browser/security/raw-html-concat.yaml", "description": "User controlled data in a HTML string may result in XSS", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/browser/security/raw-html-concat.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/xss/"], "category": "security", "technology": ["browser"], "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "ruby": [{"file_path": "../ruby/rails/security/audit/xss/avoid-link-to.yaml", "description": "This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped. This means that user input which reaches the body will be executed when the HTML is rendered. Even in other versions, values starting with `javascript:` or `data:` are not escaped. It is better to create and use a safer function which checks the body argument.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/audit/xss/avoid-link-to.yaml", "metadata": {"source-rule-url": "https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_link_to.rb", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "references": ["https://brakemanscanner.org/docs/warning_types/link_to/", "https://brakemanscanner.org/docs/warning_types/link_to_href/"], "category": "security", "technology": ["rails"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../ruby/rails/security/injection/raw-html-format.yaml", "description": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/ruby/rails/security/injection/raw-html-format.yaml", "metadata": {"cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "category": "security", "technology": ["rails"], "references": ["https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/", "https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A08:2017 - Insecure Deserialization": {"python": [{"file_path": "../python/aws-lambda/security/tainted-pickle-deserialization.yaml", "description": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-pickle-deserialization.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://docs.python.org/3/library/pickle.html", "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"], "category": "security", "technology": ["python", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/deserialization/avoid-unsafe-ruamel.yaml", "description": "Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/deserialization/avoid-unsafe-ruamel.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ"], "category": "security", "technology": ["ruamel.yaml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/deserialization/avoid-pyyaml-load.yaml", "description": "Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/deserialization/avoid-pyyaml-load.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation", "https://nvd.nist.gov/vuln/detail/CVE-2017-18342"], "category": "security", "technology": ["pyyaml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/deserialization/pickle.yaml", "description": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/deserialization/pickle.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://docs.python.org/3/library/pickle.html"], "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/audit/avoid-insecure-deserialization.yaml", "description": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/audit/avoid-insecure-deserialization.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://docs.python.org/3/library/pickle.html"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/insecure-jms-deserialization.yaml", "description": "JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/insecure-jms-deserialization.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.3 Insecue Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/deserialization.yaml", "description": "Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/deserialization.yaml", "metadata": {"category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["php"], "references": ["https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A08:2021 - Software and Data Integrity Failures": {"python": [{"file_path": "../python/aws-lambda/security/tainted-pickle-deserialization.yaml", "description": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/aws-lambda/security/tainted-pickle-deserialization.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://docs.python.org/3/library/pickle.html", "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"], "category": "security", "technology": ["python", "aws-lambda"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/deserialization/avoid-unsafe-ruamel.yaml", "description": "Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/deserialization/avoid-unsafe-ruamel.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ"], "category": "security", "technology": ["ruamel.yaml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/deserialization/avoid-pyyaml-load.yaml", "description": "Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/deserialization/avoid-pyyaml-load.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation", "https://nvd.nist.gov/vuln/detail/CVE-2017-18342"], "category": "security", "technology": ["pyyaml"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/lang/security/deserialization/pickle.yaml", "description": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/deserialization/pickle.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://docs.python.org/3/library/pickle.html"], "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../python/django/security/audit/avoid-insecure-deserialization.yaml", "description": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/django/security/audit/avoid-insecure-deserialization.yaml", "metadata": {"owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-502: Deserialization of Untrusted Data"], "references": ["https://docs.python.org/3/library/pickle.html"], "category": "security", "technology": ["django"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "java": [{"file_path": "../java/lang/security/insecure-jms-deserialization.yaml", "description": "JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/lang/security/insecure-jms-deserialization.yaml", "metadata": {"cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.3 Insecue Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf"], "category": "security", "technology": ["java"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "php": [{"file_path": "../php/lang/security/deserialization.yaml", "description": "Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/php/lang/security/deserialization.yaml", "metadata": {"category": "security", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "technology": ["php"], "references": ["https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/dotnet/security/audit/mass-assignment.yaml", "description": "Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-posting attacks, which could create a new parameter in the binding request and manipulate the underlying object in the application.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/dotnet/security/audit/mass-assignment.yaml", "metadata": {"likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM", "category": "security", "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://cwe.mitre.org/data/definitions/915.html", "https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa6-mass-assignment.md"], "subcategory": ["vuln"], "technology": [".net"]}}], "javascript": [{"file_path": "../javascript/express/security/express-data-exfiltration.yaml", "description": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-data-exfiltration.yaml", "metadata": {"owasp": ["A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "references": ["https://en.wikipedia.org/wiki/Mass_assignment_vulnerability", "https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html"], "category": "security", "technology": ["express"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "LOW"}}, {"file_path": "../javascript/browser/security/wildcard-postmessage-configuration.yaml", "description": "The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/browser/security/wildcard-postmessage-configuration.yaml", "metadata": {"owasp": ["A08:2021 - Software and Data Integrity Failures"], "cwe": ["CWE-345: Insufficient Verification of Data Authenticity"], "category": "security", "technology": ["browser"], "subcategory": ["audit"], "likelihood": "HIGH", "impact": "MEDIUM", "confidence": "MEDIUM", "references": ["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"]}}]}, "A04:2017 - XML External Entities (XXE)": {"python": [{"file_path": "../python/lang/security/use-defused-xml.yaml", "description": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/use-defused-xml.yaml", "metadata": {"owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "references": ["https://docs.python.org/3/library/xml.html", "https://github.com/tiran/defusedxml", "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"], "category": "security", "technology": ["python"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "csharp": [{"file_path": "../csharp/lang/security/xxe/xmldocument-unsafe-parser-override.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmldocument-unsafe-parser-override.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}, {"file_path": "../csharp/lang/security/xxe/xmlreadersettings-unsafe-parser-override.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmlreadersettings-unsafe-parser-override.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}, {"file_path": "../csharp/lang/security/xxe/xmltextreader-unsafe-defaults.yaml", "description": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/csharp/lang/security/xxe/xmltextreader-unsafe-defaults.yaml", "metadata": {"category": "security", "references": ["https://www.jardinesoftware.net/2016/05/26/xxe-and-net/", "https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks"], "technology": [".net", "xml"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "impact": "MEDIUM", "likelihood": "LOW", "confidence": "MEDIUM"}}], "javascript": [{"file_path": "../javascript/express/security/express-xml2json-xxe.yaml", "description": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-xml2json-xxe.yaml", "metadata": {"owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "category": "security", "technology": ["express"], "references": ["https://www.npmjs.com/package/xml2json"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}, {"file_path": "../javascript/express/security/express-expat-xxe.yaml", "description": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/javascript/express/security/express-expat-xxe.yaml", "metadata": {"interfile": true, "owasp": ["A04:2017 - XML External Entities (XXE)", "A05:2021 - Security Misconfiguration"], "cwe": ["CWE-611: Improper Restriction of XML External Entity Reference"], "asvs": {"section": "V5 Validation, Sanitization and Encoding", "control_id": "5.5.2 Insecue XML Deserialization", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention", "version": "4"}, "references": ["https://github.com/astro/node-expat"], "category": "security", "technology": ["express"], "cwe2022-top25": true, "cwe2021-top25": true, "subcategory": ["vuln"], "likelihood": "MEDIUM", "impact": "MEDIUM", "confidence": "MEDIUM"}}]}, "A09:2021 - Security Logging and Monitoring Failures": {"python": [{"file_path": "../python/lang/security/audit/logging/logger-credential-leak.yaml", "description": "Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/python/lang/security/audit/logging/logger-credential-leak.yaml", "metadata": {"cwe": ["CWE-532: Insertion of Sensitive Information into Log File"], "category": "security", "technology": ["python"], "owasp": ["A09:2021 - Security Logging and Monitoring Failures"], "references": ["https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"], "subcategory": ["vuln"], "likelihood": "LOW", "impact": "MEDIUM", "confidence": "MEDIUM"}}], "c": [{"file_path": "../c/lang/security/info-leak-on-non-formatted-string.yaml", "description": "Use %s, %d, %c... to format your variables, otherwise this could leak information.", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/c/lang/security/info-leak-on-non-formatted-string.yaml", "metadata": {"cwe": ["CWE-532: Insertion of Sensitive Information into Log File"], "references": ["http://nebelwelt.net/files/13PPREW.pdf"], "category": "security", "technology": ["c"], "confidence": "MEDIUM", "owasp": ["A09:2021 - Security Logging and Monitoring Failures"], "subcategory": ["audit"], "likelihood": "LOW", "impact": "MEDIUM"}}]}, "A5:2021 Security Misconfiguration": {"java": [{"file_path": "../java/android/security/exported_activity.yaml", "description": "Use of Exported Activity", "raw_github_file": "https://raw.githubusercontent.com/returntocorp/semgrep-rules/develop/java/android/security/exported_activity.yaml", "metadata": {"vulnerability": "Use of exported components", "Description": "The application exports an activity. Any application on the device can launch the exported activity which may compromise the integrity of your application or its data.  Ensure that any exported activities do not have privileged access to your application's control plane.", "Severity": "HIGH", "category": "security", "subcategory": ["vuln"], "cwe": ["CWE-926: Improper Export of Android Application Components"], "confidence": "MEDIUM", "likelihood": "MEDIUM", "impact": "MEDIUM", "owasp": ["A5:2021 Security Misconfiguration"], "technology": ["Android"], "references": ["https://cwe.mitre.org/data/definitions/926.html"]}}]}}